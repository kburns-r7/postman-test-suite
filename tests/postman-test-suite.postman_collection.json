{
	"info": {
		"_postman_id": "70daa945-9019-4d74-a55d-861bdd34d253",
		"name": "Regression Test ",
		"description": "This is a fully automated test suite for Regression testing on new releases.\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Run first",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"user_name\", jsonData.user_name);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "\"{{divvy_password}}\"",
									"type": "string"
								},
								{
									"key": "username",
									"value": "\"{{divvy_username}}\"",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"disabled": true
							},
							{
								"key": "X-Auth-Token",
								"value": "session_id",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{divvy_username}}\",\n\t\"password\": \"{{divvy_password}}\"\n}"
						},
						"url": {
							"raw": "{{domain}}/v2/public/user/login",
							"host": [
								"{{domain}}"
							],
							"path": [
								"v2",
								"public",
								"user",
								"login"
							]
						}
					},
					"response": [
						{
							"name": "Example Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"description": "The mime type of this content"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"user_email\": \"{{divvy_username}}\",\n  \"user_password\": \"{{divvy_password}}\"\n}"
								},
								"url": {
									"raw": "{{domain}}/v2/public/user/login",
									"host": [
										"{{domain}}"
									],
									"path": [
										"v2",
										"public",
										"user",
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Headers",
									"value": "Origin, X-Requested-With, Content-Type, Accept",
									"name": "Access-Control-Allow-Headers",
									"description": ""
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "POST, GET, OPTIONS",
									"name": "Access-Control-Allow-Methods",
									"description": ""
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*",
									"name": "Access-Control-Allow-Origin",
									"description": ""
								},
								{
									"key": "Content-Length",
									"value": "286",
									"name": "Content-Length",
									"description": ""
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": ""
								},
								{
									"key": "Date",
									"value": "Mon, 07 Nov 2016 15:12:28 GMT",
									"name": "Date",
									"description": ""
								},
								{
									"key": "Server",
									"value": "waitress",
									"name": "Server",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\n    \"user_id\": 1,\n    \"user_name\": \"Jane Doe\",\n    \"session_id\": \"692896d736f245188512e39e0bdf1db8\",\n    \"session_timeout\": 720,\n    \"domain_admin\": true,\n    \"customer_id\": \"9D:94:5C:F1:6D:F5:60:64:A1:B8:83:2C:89:95:52:16:67:FD:68:2E\",\n    \"domain_viewer\": false,\n    \"auth_plugin_exists\": false,\n    \"user_email\": \"jane.doe@divvycloud.com\"\n}"
						}
					]
				},
				{
					"name": "Switch organization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var user = pm.environment.get(\"user_name\");",
									"",
									"if (user === \"APITestingAdmin\" || user === \"APITestingAdmin-RO\")",
									"{ ",
									"    pm.test(user + \" can switch Org\", function () {",
									"       pm.response.to.have.status(200);",
									"    });",
									"}",
									"else",
									"{",
									"    pm.test(user + \" cannot switch Org\", function () {",
									"        pm.response.to.have.status(401);",
									"    });",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{divvy-username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Auth-Token",
								"value": "{{X-Auth-Token}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"organization_name\": \"API Testing\"\n}"
						},
						"url": {
							"raw": "{{domain}}/v2/prototype/domain/switch_organization",
							"host": [
								"{{domain}}"
							],
							"path": [
								"v2",
								"prototype",
								"domain",
								"switch_organization"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Identity Management",
			"item": [
				{
					"name": "API User create key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var user = pm.environment.get(\"user_name\");",
									"",
									"if (user === \"API-OrgAdmin\" || user === \"APITestingAdmin\")",
									"{",
									"    pm.test(user + \" can create keys & Key length > 51\", function () {",
									"    var jsonData = JSON.parse(responseBody);",
									"    pm.response.to.have.status(200);",
									"    pm.expect(jsonData.length).greaterThan(50);",
									"    });",
									"}",
									"else ",
									"{",
									"    pm.test(user + \" cannot create keys for other users\", function () {",
									"    //check for response for non authorized users",
									"    pm.response.to.have.status(500);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error_message).contain(\"This user is not authorized for API Key generation\");",
									"    });",
									"}",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var user = pm.environment.get(\"divvy_username\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{divvy_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{divvy_username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Auth-Token",
								"value": "{{X-Auth-Token}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\"user_id\":\"631\",\"key_length\":32} "
						},
						"url": {
							"raw": "{{domain}}/v2/public/apikey/create",
							"host": [
								"{{domain}}"
							],
							"path": [
								"v2",
								"public",
								"apikey",
								"create"
							]
						}
					},
					"response": [
						{
							"name": "Create User",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"value": "{{X-Token-Auth}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"authentication_type\":\"internal\",\n\t\"name\":\"James Smith\",\n\t\"username\":\"jamessmith\",\n\t\"email\":\"jamessmith@divvycloud.com\",\n\t\"access_level\":\"BASIC_USER\",\n\t\"password\":\"Password12345\",\n\t\"confirm_password\":\"Password12345\"\n}"
								},
								"url": {
									"raw": "{{domain}}/v2/public/user/create",
									"host": [
										"{{domain}}"
									],
									"path": [
										"v2",
										"public",
										"user",
										"create"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Headers",
									"value": "Origin, X-Requested-With, Content-Type, Accept",
									"name": "Access-Control-Allow-Headers",
									"description": ""
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "POST, GET, OPTIONS",
									"name": "Access-Control-Allow-Methods",
									"description": ""
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*",
									"name": "Access-Control-Allow-Origin",
									"description": ""
								},
								{
									"key": "Content-Length",
									"value": "296",
									"name": "Content-Length",
									"description": ""
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": ""
								},
								{
									"key": "Date",
									"value": "Wed, 25 Oct 2017 14:37:11 GMT",
									"name": "Date",
									"description": ""
								},
								{
									"key": "Server",
									"value": "waitress",
									"name": "Server",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\n\t\"username\": \"jamessmith\",\n\t\"two_factor_enabled\": false,\n\t\"user_id\": 7,\n\t\"name\": \"James Smith\",\n\t\"resource_id\": \"divvyuser:7:\",\n\t\"two_factor_required\": false,\n\t\"organization_name\": \"Default Organization\",\n\t\"domain_admin\": false,\n\t\"email_address\": \"jamessmith@divvycloud.com\",\n\t\"organization_admin\": false\n}"
						}
					]
				},
				{
					"name": "API only user creation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var user = pm.environment.get(\"user_name\");",
									"",
									"if (user === \"API-OrgAdmin\" || user === \"APITestingAdmin\")",
									"{",
									"    pm.test(\"User \" + user + \" can create API only user and response contains keys\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.api_key).length.greaterThan(50);",
									"    });",
									"}",
									"else ",
									"{",
									"    pm.test(\"User \" + user + \" cannot create API only Users\", function () {",
									"    //check for response for non authorized users",
									"    pm.response.to.have.status(401);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error_message).contain(\"You do not have sufficient permissions to execute this operation\");",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{divvy_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{divvy_username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Auth-Token",
								"value": "{{X-Auth-Token}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"authentication_type\":\"internal\", \n    \"username\":\"rkazi-apionly {{$randomInt}}\", \n    \"name\":\"test user\", \n    \"email\":\"rkazi@rapid7.com\", \n    \"access_level\":\"DOMAIN_ADMIN\", \n    \"console_access_denied\": true \n}"
						},
						"url": {
							"raw": "{{domain}}/v2/public/user/create_api_only_user",
							"host": [
								"{{domain}}"
							],
							"path": [
								"v2",
								"public",
								"user",
								"create_api_only_user"
							]
						}
					},
					"response": [
						{
							"name": "Create User",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"value": "{{X-Token-Auth}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"authentication_type\":\"internal\",\n\t\"name\":\"James Smith\",\n\t\"username\":\"jamessmith\",\n\t\"email\":\"jamessmith@divvycloud.com\",\n\t\"access_level\":\"BASIC_USER\",\n\t\"password\":\"Password12345\",\n\t\"confirm_password\":\"Password12345\"\n}"
								},
								"url": {
									"raw": "{{domain}}/v2/public/user/create",
									"host": [
										"{{domain}}"
									],
									"path": [
										"v2",
										"public",
										"user",
										"create"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Headers",
									"value": "Origin, X-Requested-With, Content-Type, Accept",
									"name": "Access-Control-Allow-Headers",
									"description": ""
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "POST, GET, OPTIONS",
									"name": "Access-Control-Allow-Methods",
									"description": ""
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*",
									"name": "Access-Control-Allow-Origin",
									"description": ""
								},
								{
									"key": "Content-Length",
									"value": "296",
									"name": "Content-Length",
									"description": ""
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": ""
								},
								{
									"key": "Date",
									"value": "Wed, 25 Oct 2017 14:37:11 GMT",
									"name": "Date",
									"description": ""
								},
								{
									"key": "Server",
									"value": "waitress",
									"name": "Server",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\n\t\"username\": \"jamessmith\",\n\t\"two_factor_enabled\": false,\n\t\"user_id\": 7,\n\t\"name\": \"James Smith\",\n\t\"resource_id\": \"divvyuser:7:\",\n\t\"two_factor_required\": false,\n\t\"organization_name\": \"Default Organization\",\n\t\"domain_admin\": false,\n\t\"email_address\": \"jamessmith@divvycloud.com\",\n\t\"organization_admin\": false\n}"
						}
					]
				},
				{
					"name": "Users List - Public",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var user = pm.environment.get(\"user_name\");",
									"var jsonData = pm.response.json();",
									"if (user === \"API-OrgAdmin\" || user === \"APITestingAdmin\" || user === \"APITestingAdmin-RO\")",
									"{",
									"pm.test(user + \" can get User list > 10 and Valid User is returned\", function () {",
									"    pm.expect(jsonData.total_count).greaterThan(10);",
									"    pm.expect(pm.response.text()).to.include(\"basic-editor\")",
									"});",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "\"{{divvy_password}}\"",
									"type": "string"
								},
								{
									"key": "username",
									"value": "\"{{divvy_username}}\"",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Auth-Token",
								"value": "{{X-Auth-Token}}",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{domain}}/v2/public/users/list",
							"host": [
								"{{domain}}"
							],
							"path": [
								"v2",
								"public",
								"users",
								"list"
							]
						}
					},
					"response": [
						{
							"name": "Users List",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"value": "{{X-Auth-Token}}"
									}
								],
								"url": {
									"raw": "{{domain}}/v2/public/users/list",
									"host": [
										"{{domain}}"
									],
									"path": [
										"v2",
										"public",
										"users",
										"list"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Headers",
									"value": "Origin, X-Requested-With, Content-Type, Accept",
									"name": "Access-Control-Allow-Headers",
									"description": ""
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "POST, GET, OPTIONS",
									"name": "Access-Control-Allow-Methods",
									"description": ""
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*",
									"name": "Access-Control-Allow-Origin",
									"description": ""
								},
								{
									"key": "Cache-Control",
									"value": "private, no-cache, no-store, no-transform, must-revalidate, max-age=0",
									"name": "Cache-Control",
									"description": ""
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": ""
								},
								{
									"key": "Content-Length",
									"value": "332",
									"name": "Content-Length",
									"description": ""
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": ""
								},
								{
									"key": "Date",
									"value": "Wed, 25 Oct 2017 14:19:22 GMT",
									"name": "Date",
									"description": ""
								},
								{
									"key": "Last-Modified",
									"value": "2017-10-25 10:19:23.013601",
									"name": "Last-Modified",
									"description": ""
								},
								{
									"key": "Server",
									"value": "waitress",
									"name": "Server",
									"description": ""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding",
									"name": "Vary",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\n    \"users\": [\n        {\n            \"username\": \"jamman\",\n            \"two_factor_enabled\": false,\n            \"user_id\": 2,\n            \"name\": \"James Madison\",\n            \"resource_id\": \"divvyuser:2:\",\n            \"two_factor_required\": false,\n            \"organization_name\": \"Default Organization\",\n            \"domain_admin\": false,\n            \"groups\": 0,\n            \"email_address\": \"jamman@divvycloud.com\",\n            \"owned_resources\": 4,\n            \"organization_admin\": false\n        },\n        {\n            \"username\": \"benfrank\",\n            \"two_factor_enabled\": false,\n            \"user_id\": 3,\n            \"name\": \"Benjamin Franklin\",\n            \"resource_id\": \"divvyuser:3:\",\n            \"two_factor_required\": false,\n            \"organization_name\": \"Default Organization\",\n            \"domain_admin\": false,\n            \"groups\": 0,\n            \"email_address\": \"benfrank@divvycloud.com\",\n            \"owned_resources\": 0,\n            \"organization_admin\": false\n        },\n        {\n            \"username\": \"kobe\",\n            \"two_factor_enabled\": false,\n            \"user_id\": 4,\n            \"name\": \"Kobe B\",\n            \"resource_id\": \"divvyuser:4:\",\n            \"two_factor_required\": false,\n            \"organization_name\": \"Default Organization\",\n            \"domain_admin\": false,\n            \"groups\": 1,\n            \"email_address\": \"kobe@divvycloud.com\",\n            \"owned_resources\": 0,\n            \"organization_admin\": false\n        },\n        {\n            \"username\": \"chefec2\",\n            \"two_factor_enabled\": false,\n            \"user_id\": 6,\n            \"name\": \"Chef Champ\",\n            \"resource_id\": \"divvyuser:6:\",\n            \"two_factor_required\": false,\n            \"organization_name\": \"Default Organization\",\n            \"domain_admin\": false,\n            \"groups\": 0,\n            \"email_address\": \"chef@divvycloud.com\",\n            \"owned_resources\": 0,\n            \"organization_admin\": true\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Create User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"user_resource_id\", jsonData.resource_id);",
									"var user = pm.environment.get(\"user_name\");",
									"if (user === \"API-OrgAdmin\" || user === \"APITestingAdmin\")",
									"{ ",
									"    pm.test(user + \"can create Users and response is valid\", function () {",
									"        pm.response.to.have.status(200);",
									"        pm.expect(jsonData.resource_id).contain(\"divvyuser\");",
									"    });",
									"}",
									"else",
									"{ ",
									"     pm.test(user + \" cannot create Users\", function () {",
									"    //check for response for non authorized users",
									"       pm.response.to.have.status(401);",
									"       pm.expect(jsonData.error_message).contain(\"You do not have sufficient permissions to execute this operation\");",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic Int7ZGl2dnlfdXNlcm5hbWV9fSI6Int7ZGl2dnlfcGFzc3dvcmR9fSI="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"APIAutomationUser + {{$randomInt}}\",\n  \"email\": \"boat@boatface.com\",\n  \"username\": \"APIAutomationUser + {{$randomInt}}\",\n  \"password\": \"password\",\n  \"confirm_password\": \"password\",\n  \"access_level\": \"BASIC_USER\",\n  \"two_factor_required\": false\n}"
						},
						"url": {
							"raw": "{{domain}}/v2/public/user/create",
							"host": [
								"{{domain}}"
							],
							"path": [
								"v2",
								"public",
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var user = pm.environment.get(\"user_name\");",
									"var jsonData = pm.response.json();",
									"",
									"if (user === \"API-OrgAdmin\" || user === \"APITestingAdmin\")",
									"{",
									"    pm.test(user + \" can delete Users\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"}",
									"else",
									"{",
									"     pm.test(user + \" cannot delete Users\", function () {",
									"    //check for response for non authorized users",
									"        pm.response.to.have.status(401);",
									"        pm.expect(jsonData.error_message).contain(\"You do not have sufficient permissions to execute this operation\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic cmthemk6UGFzc3dvcmQxMjM0IQ=="
							}
						],
						"url": {
							"raw": "{{domain}}/v2/prototype/user/{{user_resource_id}}/delete",
							"host": [
								"{{domain}}"
							],
							"path": [
								"v2",
								"prototype",
								"user",
								"{{user_resource_id}}",
								"delete"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Clouds",
			"item": [
				{
					"name": "List Clouds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var user = pm.environment.get(\"user_name\");",
									"var jsonData = pm.response.json();",
									"",
									"//Basic-Disabled user has no view permission for Role and all entitlements are disabled.",
									"if (user === \"Basic-Disabled\"){",
									"    pm.test(user + \" cannot list cloud without role-view permission; Cloud count = 0\", function () {",
									"      pm.response.to.have.status(200);",
									"      pm.expect(jsonData.total_count).equal(0);",
									"    });",
									"}",
									"//Basic-Viewer user has view permission for Role and has two cloud accounts in scope with viewer entitllements.",
									"else if (user === \"Basic-Viewer\"){",
									"  pm.test(user + \" can view only role scoped cloud accounts; Cloud Count = 2 \", function () {",
									"      pm.response.to.have.status(200);",
									"      pm.expect(jsonData.total_count).equal(2);",
									"    });",
									"}",
									"else",
									"{",
									"    pm.test(user + \" can view all clouds; Cloud Count > 4\", function () {",
									"      pm.response.to.have.status(200);",
									"      pm.expect(jsonData.total_count).greaterThan(4);",
									"    });",
									"    //base time when this test was created is  579ms",
									"    pm.test(\"Response time is less than 1000ms\", function () {",
									"      pm.expect(pm.response.responseTime).to.be.below(1000);",
									"    });",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{divvy-username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Auth-Token",
								"value": "{{X-Auth-Token}}",
								"disabled": true
							},
							{
								"key": "cloud_type_id",
								"value": "AWS"
							}
						],
						"url": {
							"raw": "{{domain}}/v2/public/clouds/list",
							"host": [
								"{{domain}}"
							],
							"path": [
								"v2",
								"public",
								"clouds",
								"list"
							]
						}
					},
					"response": [
						{
							"name": "List Clouds",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"value": "{{X-Auth-Token}}"
									}
								],
								"url": {
									"raw": "{{domain}}/v2/public/clouds/list",
									"host": [
										"{{domain}}"
									],
									"path": [
										"v2",
										"public",
										"clouds",
										"list"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "access-control-allow-headers",
									"value": "Origin, X-Requested-With, Content-Type, Accept",
									"name": "access-control-allow-headers",
									"description": ""
								},
								{
									"key": "access-control-allow-methods",
									"value": "POST, GET, OPTIONS",
									"name": "access-control-allow-methods",
									"description": ""
								},
								{
									"key": "access-control-allow-origin",
									"value": "*",
									"name": "access-control-allow-origin",
									"description": ""
								},
								{
									"key": "content-length",
									"value": "263",
									"name": "content-length",
									"description": ""
								},
								{
									"key": "content-type",
									"value": "application/json",
									"name": "content-type",
									"description": ""
								},
								{
									"key": "date",
									"value": "Wed, 25 Oct 2017 14:14:14 GMT",
									"name": "date",
									"description": ""
								},
								{
									"key": "server",
									"value": "waitress",
									"name": "server",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\n    \"total_count\": 1,\n    \"clouds\": [\n        {\n            \"status\": \"REFRESH\",\n            \"group_resource_id\": \"samplegroupid\",\n            \"name\": \"Sample Cloud\",\n            \"resource_id\": \"sample_resource_id\",\n            \"cloud_type_id\": \"AWS\",\n            \"creation_time\": \"2017-10-17 18:37:30\",\n            \"id\": 1,\n            \"resources\": 900\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "List Clouds With Badges",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"responseJson = JSON.parse(responseBody);",
									"var user = pm.environment.get(\"user_name\");",
									"var list = responseJson.length;",
									"",
									"if (user === \"Basic-Viewer\"){",
									"    pm.test(user + \" can view only scoped accounts. Count: \" + list, function () {",
									"        pm.response.to.have.status(200);",
									"        pm.expect(pm.response.text()).to.not.contain(\"QA GCP account\");",
									"        pm.expect(pm.response.text()).to.contain(\"AWS-IAR\");",
									"        pm.expect(list).to.be.equal(2);",
									"    });   ",
									"}",
									"else if (user === \"Basic-Disabled\"){",
									"    pm.test(user + \" gets an empty response. Count: \"+ list, function () {",
									"        pm.response.to.have.status(200);",
									"        pm.expect(pm.response.text()).to.not.contain(\"QA GCP account\");",
									"        pm.expect(list).to.be.equal(0);",
									"    });",
									"}",
									"else {",
									"    pm.test(user + \" can access all cloud accounts. Count : \"+ list, function () {",
									"        pm.response.to.have.status(200);",
									"        pm.expect(pm.response.text()).to.contain(\"QA GCP account\");",
									"        pm.expect(list).to.be.equal(5);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{divvy_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{divvy_username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Auth-Token",
								"value": "{{X-Auth-Token}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{domain}}/v2/public/badge/clouds/list",
							"host": [
								"{{domain}}"
							],
							"path": [
								"v2",
								"public",
								"badge",
								"clouds",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "List specific  Cloud Types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var user = pm.environment.get(\"user_name\");",
									"var jsonData = pm.response.json();",
									"if (user === \"API-OrgAdmin\" || user === \"APITestingAdmin\" || user === \"ApiTestingAdmin-RO\")",
									"{",
									"    pm.test(user + \" can query by cloud types Cloud accounts = 3 and Valid clouds are returned\", function () {",
									"     var jsonData = pm.response.json();",
									"     var cloud_count = jsonData.total_count;",
									"     pm.expect(cloud_count).equal(3);",
									"     for (i=0; i > cloud_count; i++){",
									"        pm.expect(jsonData.clouds[i].id).contains(\"AWS\")",
									"      }",
									"    });",
									"}",
									"else",
									"{",
									"   pm.test(\"Status code is 200\", function () {",
									"     pm.response.to.have.status(200);",
									"});",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{divvy_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{divvy_username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content",
								"value": "application/json"
							},
							{
								"key": "X-Auth-Token",
								"value": "{{X-Auth-Token}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"limit\":250,\n\"offset\":0,\n\"order_by\":\"name\",\n\"filters\":[{\"field_name\":\"cloud_type_id\",\"filter_type\":\"EXACT\",\"filter_value\":\"AWS\"}]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/v2/public/clouds/list",
							"host": [
								"{{domain}}"
							],
							"path": [
								"v2",
								"public",
								"clouds",
								"list"
							]
						}
					},
					"response": [
						{
							"name": "List Cloud Types",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"value": "{{X-Auth-Token}}"
									}
								],
								"url": {
									"raw": "{{domain}}/v2/public/cloudtypes/list",
									"host": [
										"{{domain}}"
									],
									"path": [
										"v2",
										"public",
										"cloudtypes",
										"list"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "access-control-allow-headers",
									"value": "Origin, X-Requested-With, Content-Type, Accept",
									"name": "access-control-allow-headers",
									"description": ""
								},
								{
									"key": "access-control-allow-methods",
									"value": "POST, GET, OPTIONS",
									"name": "access-control-allow-methods",
									"description": ""
								},
								{
									"key": "access-control-allow-origin",
									"value": "*",
									"name": "access-control-allow-origin",
									"description": ""
								},
								{
									"key": "cache-control",
									"value": "private, no-cache, no-store, no-transform, must-revalidate, max-age=0",
									"name": "cache-control",
									"description": ""
								},
								{
									"key": "content-encoding",
									"value": "gzip",
									"name": "content-encoding",
									"description": ""
								},
								{
									"key": "content-length",
									"value": "298",
									"name": "content-length",
									"description": ""
								},
								{
									"key": "content-type",
									"value": "application/json",
									"name": "content-type",
									"description": ""
								},
								{
									"key": "date",
									"value": "Wed, 25 Oct 2017 14:13:39 GMT",
									"name": "date",
									"description": ""
								},
								{
									"key": "last-modified",
									"value": "2017-10-25 10:13:39.237937",
									"name": "last-modified",
									"description": ""
								},
								{
									"key": "server",
									"value": "waitress",
									"name": "server",
									"description": ""
								},
								{
									"key": "vary",
									"value": "Accept-Encoding",
									"name": "vary",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\"clouds\": [{\"cloud_access\": \"public\", \"cloud_type_id\": \"AWS\", \"name\": \"Amazon Web Services\"}, {\"cloud_access\": \"public\", \"cloud_type_id\": \"AWS_GOV\", \"name\": \"Amazon Web Services (GovCloud)\"}, {\"cloud_access\": \"public\", \"cloud_type_id\": \"AZURE\", \"name\": \"Azure (Service Management)\"}, {\"cloud_access\": \"public\", \"cloud_type_id\": \"AZURE_ARM\", \"name\": \"Azure (ARM)\"}, {\"cloud_access\": \"public\", \"cloud_type_id\": \"DO\", \"name\": \"DigitalOcean\"}, {\"cloud_access\": \"public\", \"cloud_type_id\": \"GCE\", \"name\": \"Google Cloud Platform\"}, {\"cloud_access\": \"private\", \"cloud_type_id\": \"OS\", \"name\": \"OpenStack\"}, {\"cloud_access\": \"public\", \"cloud_type_id\": \"RAX\", \"name\": \"Rackspace\"}, {\"cloud_access\": \"public\", \"cloud_type_id\": \"SOFTLAYER\", \"name\": \"IBM SoftLayer\"}, {\"cloud_access\": \"private\", \"cloud_type_id\": \"VCLOUD_DIRECTOR\", \"name\": \"VMware vCloud Director\"}, {\"cloud_access\": \"private\", \"cloud_type_id\": \"VMWARE_VSPHERE\", \"name\": \"VMware vSphere\"}]}"
						}
					]
				}
			]
		},
		{
			"name": "Resources",
			"item": [
				{
					"name": "Query Resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var user = pm.environment.get(\"user_name\");",
									"var jsonData = pm.response.json();",
									"var list_count = jsonData.resources.length;",
									"",
									"//Basic-Disabled user has 0 clouds in scope and all entitlements are disabled. ",
									"if (user === \"Basic-Disabled\")",
									"{",
									"    pm.test(user + \" cannot query resources with 0 cloud scope; 0 resources returned\", function () {",
									"      pm.response.to.have.status(200);",
									"      pm.expect(jsonData.selected_resource_type).to.contain(\"instance\");",
									"      pm.expect(pm.response.text()).to.not.include(\"DivvyCloud-IAR-Power-Consumer-Monitoring\");",
									"    });",
									"}",
									"else",
									"{",
									"    pm.test(user + \" can query resources; Instance resource type returned with common data. Count: \" + list_count, function () {",
									"      pm.response.to.have.status(200);",
									"      pm.expect(jsonData.selected_resource_type).to.contain(\"instance\");",
									"      pm.expect(pm.response.text()).to.include(\"DivvyCloud-IAR-Power-Consumer-Monitoring\");",
									"    });",
									"}",
									"var jsonData = pm.response.json();",
									"",
									"",
									"//Baseline to pull 3k snapshots is 1070",
									"pm.test(\"Response time is less than 1500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "\"{{divvy_password}}\"",
									"type": "string"
								},
								{
									"key": "username",
									"value": "\"{{divvy_username}}\"",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Auth-Token",
								"value": "{{X-Auth-Token}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"scopes\":[],\n\t\"filters\":[],\n\t\"offset\":0,\n\t\"limit\":100,\n\t\"order_by\":\"\",\n    \"tags\":[],\n\t\"selected_resource_type\": \"instance\"\n}"
						},
						"url": {
							"raw": "{{domain}}/v2/public/resource/query",
							"host": [
								"{{domain}}"
							],
							"path": [
								"v2",
								"public",
								"resource",
								"query"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": [
						{
							"name": "Query Resource",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"value": "{{X-Auth-Token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"selected_resource_type\": \"instance\",\n\t\"scopes\":[],\n\t\"filters\":[],\n\t\"offset\":0,\n\t\"limit\":25,\n\t\"order_by\":\"\"\n}"
								},
								"url": {
									"raw": "{{domain}}/v2/public/resource/query",
									"host": [
										"{{domain}}"
									],
									"path": [
										"v2",
										"public",
										"resource",
										"query"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Headers",
									"value": "Origin, X-Requested-With, Content-Type, Accept",
									"name": "Access-Control-Allow-Headers",
									"description": ""
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "POST, GET, OPTIONS",
									"name": "Access-Control-Allow-Methods",
									"description": ""
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*",
									"name": "Access-Control-Allow-Origin",
									"description": ""
								},
								{
									"key": "Cache-Control",
									"value": "private, no-cache, no-store, no-transform, must-revalidate, max-age=0",
									"name": "Cache-Control",
									"description": ""
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": ""
								},
								{
									"key": "Content-Length",
									"value": "2732",
									"name": "Content-Length",
									"description": ""
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": ""
								},
								{
									"key": "Date",
									"value": "Wed, 25 Oct 2017 17:31:35 GMT",
									"name": "Date",
									"description": ""
								},
								{
									"key": "Last-Modified",
									"value": "2017-10-25 13:31:35.138189",
									"name": "Last-Modified",
									"description": ""
								},
								{
									"key": "Server",
									"value": "waitress",
									"name": "Server",
									"description": ""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding",
									"name": "Vary",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\n    \"scopes\": [],\n    \"limit\": 25,\n    \"filters\": [],\n    \"offset\": 0,\n    \"order_by\": \"\",\n    \"counts\": {\n        \"serviceaccesskey\": 34,\n        \"serviceencryptionkey\": 0,\n        \"servicecertificate\": 4,\n        \"servicerole\": 29,\n        \"networkpeer\": 1,\n        \"networkinterface\": 143,\n        \"mcsnapshot\": 0,\n        \"serviceuser\": 32,\n        \"servicegroup\": 4,\n        \"networkflowlog\": 8,\n        \"divvyorganizationservice\": 6,\n        \"servicepolicy\": 907,\n        \"privatesubnet\": 186,\n        \"publicip\": 34,\n        \"instance\": 67,\n        \"bigdatasnapshot\": 9,\n        \"resourceaccesslist\": 292,\n        \"servicealarm\": 2,\n        \"resourceaccesslistrule\": 785,\n        \"instancereservation\": 0,\n        \"storagecontainer\": 54,\n        \"volume\": 101,\n        \"internetgateway\": 54,\n        \"bigdatainstance\": 2,\n        \"dbinstance\": 16,\n        \"privatenetwork\": 73,\n        \"mcinstance\": 3,\n        \"dbsnapshot\": 135,\n        \"hypervisor\": 0,\n        \"routetable\": 78,\n        \"privateimage\": 106,\n        \"dnszone\": 5,\n        \"snapshot\": 160,\n        \"serviceregion\": 92,\n        \"apiaccountingconfig\": 3,\n        \"sshkeypair\": 55,\n        \"loadbalancer\": 10\n    },\n    \"selected_resource_type\": \"instance\",\n    \"resources\": [\n        {\n            \"instance\": {\n                \"instance_type\": \"t2.micro\",\n                \"root_device_type\": \"ebs\",\n                \"public_ip_address\": \"52.000.000.000\",\n                \"image_id\": \"ami-6f198a0c\",\n                \"launch_time\": \"2017-10-06T12:09:54.000Z\",\n                \"instance_id\": \"i-032075dc437488806\",\n                \"platform\": \"linux\",\n                \"state\": \"running\",\n                \"tenancy\": \"default\",\n                \"common\": {\n                    \"account\": \"Chef\",\n                    \"resource_name\": \"Singapore\",\n                    \"organization_service_id\": 15,\n                    \"availability_zone\": \"ap-southeast-1b\",\n                    \"region\": \"ap-southeast-1\",\n                    \"resource_id\": \"instance:15:ap-southeast-1:i-i-032075dc437488806:\",\n                    \"cloud\": \"AWS\",\n                    \"resource_type\": \"instance\"\n                },\n                \"private_ip_address\": \"172.00.0.000\"\n            },\n            \"resource_type\": \"instance\"\n        }\n    ],\n    \"supported_types\": [\n        \"instance\",\n        \"volume\",\n        \"snapshot\",\n        \"serviceuser\",\n        \"servicegroup\",\n        \"servicerole\",\n        \"servicepolicy\",\n        \"servicecertificate\",\n        \"bigdatainstance\",\n        \"dbinstance\",\n        \"internetgateway\",\n        \"mcinstance\",\n        \"resourceaccesslist\",\n        \"resourceaccesslistrule\",\n        \"storagecontainer\",\n        \"privateimage\",\n        \"privatenetwork\",\n        \"privatesubnet\",\n        \"networkflowlog\",\n        \"networkinterface\",\n        \"networkpeer\",\n        \"publicip\",\n        \"loadbalancer\",\n        \"instancereservation\",\n        \"dbsnapshot\",\n        \"mcsnapshot\",\n        \"bigdatasnapshot\",\n        \"routetable\",\n        \"hypervisor\",\n        \"apiaccountingconfig\",\n        \"serviceaccesskey\",\n        \"serviceencryptionkey\",\n        \"divvyorganizationservice\",\n        \"servicealarm\",\n        \"serviceregion\",\n        \"sshkeypair\",\n        \"dnszone\"\n    ]\n}"
						}
					]
				},
				{
					"name": "Query Resource with Filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var user = pm.environment.get(\"user_name\");",
									"var jsonData = pm.response.json();",
									"var list_count = jsonData.resources.length;",
									"",
									"//Basic-Disabled user has 0 clouds in scope and all entitlements are disabled. ",
									"if (user === \"Basic-Disabled\")",
									"{",
									"    pm.test(user + \" cannot query resources with 0 cloud scope; 0 resources returned\", function () {",
									"      pm.response.to.have.status(200);",
									"      pm.expect(jsonData.selected_resource_type).to.contain(\"storagecontainer\");",
									"      pm.expect(pm.response.text()).to.not.include(\"storagecontainer:9949:us-west-2:cf-templates-114ku1v2ldnbu-us-west-2:\");",
									"    });",
									"}",
									"else",
									"{",
									"    pm.test(user + \" can query resources; Instance resource type returned with common data. Count: \" + list_count, function () {",
									"      pm.response.to.have.status(200);",
									"      pm.expect(jsonData.selected_resource_type).to.contain(\"storagecontainer\");",
									"      pm.expect(pm.response.text()).to.include(\"storagecontainer:9949:us-west-2:cf-templates-114ku1v2ldnbu-us-west-2:\");",
									"    });",
									"}",
									"",
									"//Baseline to pull 17 storage container is 2809ms",
									"pm.test(\"Response time is less than 3000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "\"{{divvy_password}}\"",
									"type": "string"
								},
								{
									"key": "username",
									"value": "\"{{divvy_username}}\"",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Auth-Token",
								"value": "{{X-Auth-Token}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"selected_resource_type\": \"storagecontainer\",\n    \"scopes\": [],\n    \"filters\": [\n        {\n            \"name\": \"divvy.query.storage_container_public\",\n            \"config\": {},\n            \"collections\": {}\n        }\n    ],\n    \"offset\": 0,\n    \"limit\": 50,\n    \"tags\": [],\n    \"insight_exemptions\": false\n}"
						},
						"url": {
							"raw": "{{domain}}/v2/public/resource/query",
							"host": [
								"{{domain}}"
							],
							"path": [
								"v2",
								"public",
								"resource",
								"query"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "IAC",
			"item": [
				{
					"name": "Scan with Username and Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{divvy_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{divvy_username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Auth-Token",
								"value": "{{X-Auth-Token}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"config_name\": \"Nist for API Testing \",\n    \"scan_name\": \"Instant Scan\",\n    \"author_name\": \"John Smith\",\n    \"iac_provider\": \"terraform\",\n    \"scan_template\": \"{\\n  \\\"format_version\\\": \\\"0.1\\\",\\n  \\\"terraform_version\\\": \\\"0.12.1\\\",\\n  \\\"planned_values\\\": {\\n    \\\"root_module\\\": {\\n      \\\"resources\\\": [\\n        {\\n          \\\"address\\\": \\\"aws_security_group.allow_web\\\",\\n          \\\"mode\\\": \\\"managed\\\",\\n          \\\"type\\\": \\\"aws_security_group\\\",\\n          \\\"name\\\": \\\"allow_web\\\",\\n          \\\"provider_name\\\": \\\"aws\\\",\\n          \\\"schema_version\\\": 1,\\n          \\\"values\\\": {\\n            \\\"description\\\": \\\"Allow web inbound traffic\\\",\\n            \\\"ingress\\\": [\\n              {\\n                \\\"cidr_blocks\\\": [\\n                  \\\"0.0.0.0/0\\\"\\n                ],\\n                \\\"description\\\": \\\"\\\",\\n                \\\"from_port\\\": 443,\\n                \\\"ipv6_cidr_blocks\\\": [],\\n                \\\"prefix_list_ids\\\": [],\\n                \\\"protocol\\\": \\\"tcp\\\",\\n                \\\"security_groups\\\": [],\\n                \\\"self\\\": false,\\n                \\\"to_port\\\": 443\\n              },\\n              {\\n                \\\"cidr_blocks\\\": [\\n                  \\\"0.0.0.0/0\\\"\\n                ],\\n                \\\"description\\\": \\\"\\\",\\n                \\\"from_port\\\": 80,\\n                \\\"ipv6_cidr_blocks\\\": [],\\n                \\\"prefix_list_ids\\\": [],\\n                \\\"protocol\\\": \\\"tcp\\\",\\n                \\\"security_groups\\\": [],\\n                \\\"self\\\": false,\\n                \\\"to_port\\\": 80\\n              }\\n            ],\\n            \\\"name\\\": \\\"allow_web\\\",\\n            \\\"name_prefix\\\": null,\\n            \\\"revoke_rules_on_delete\\\": false,\\n            \\\"tags\\\": {\\n              \\\"Name\\\": \\\"allow_all_web\\\"\\n            },\\n            \\\"timeouts\\\": null\\n          }\\n        },\\n        {\\n          \\\"address\\\": \\\"aws_security_group.divvy_all\\\",\\n          \\\"mode\\\": \\\"managed\\\",\\n          \\\"type\\\": \\\"aws_security_group\\\",\\n          \\\"name\\\": \\\"divvy_all\\\",\\n          \\\"provider_name\\\": \\\"aws\\\",\\n          \\\"schema_version\\\": 1,\\n          \\\"values\\\": {\\n            \\\"description\\\": \\\"DivvyCloud Worker Nodes\\\",\\n            \\\"egress\\\": [\\n              {\\n                \\\"cidr_blocks\\\": [\\n                  \\\"0.0.0.0/0\\\"\\n                ],\\n                \\\"description\\\": \\\"\\\",\\n                \\\"from_port\\\": 0,\\n                \\\"ipv6_cidr_blocks\\\": [],\\n                \\\"prefix_list_ids\\\": [],\\n                \\\"protocol\\\": \\\"-1\\\",\\n                \\\"security_groups\\\": [],\\n                \\\"self\\\": false,\\n                \\\"to_port\\\": 0\\n              }\\n            ],\\n            \\\"ingress\\\": [\\n              {\\n                \\\"cidr_blocks\\\": [],\\n                \\\"description\\\": \\\"\\\",\\n                \\\"from_port\\\": 0,\\n                \\\"ipv6_cidr_blocks\\\": [],\\n                \\\"prefix_list_ids\\\": [],\\n                \\\"protocol\\\": \\\"-1\\\",\\n                \\\"security_groups\\\": [],\\n                \\\"self\\\": false,\\n                \\\"to_port\\\": 0\\n              }\\n            ],\\n            \\\"name\\\": \\\"divvy_all\\\",\\n            \\\"name_prefix\\\": null,\\n            \\\"revoke_rules_on_delete\\\": false,\\n            \\\"tags\\\": {\\n              \\\"Name\\\": \\\"allow_all\\\",\\n              \\\"foo\\\": \\\"bar\\\"\\n            },\\n            \\\"timeouts\\\": null,\\n            \\\"vpc_id\\\": \\\"vpc-424c723b\\\"\\n          }\\n        },\\n        {\\n          \\\"address\\\": \\\"aws_security_group.divvy_foo\\\",\\n          \\\"mode\\\": \\\"managed\\\",\\n          \\\"type\\\": \\\"aws_security_group\\\",\\n          \\\"name\\\": \\\"divvy_foo\\\",\\n          \\\"provider_name\\\": \\\"aws\\\",\\n          \\\"schema_version\\\": 1,\\n          \\\"values\\\": {\\n            \\\"description\\\": \\\"DivvyCloud Worker Nodes\\\",\\n            \\\"name\\\": \\\"divvy_all2\\\",\\n            \\\"name_prefix\\\": null,\\n            \\\"revoke_rules_on_delete\\\": false,\\n            \\\"tags\\\": null,\\n            \\\"timeouts\\\": null\\n          }\\n        },\\n        {\\n          \\\"address\\\": \\\"aws_security_group.no_rules\\\",\\n          \\\"mode\\\": \\\"managed\\\",\\n          \\\"type\\\": \\\"aws_security_group\\\",\\n          \\\"name\\\": \\\"no_rules\\\",\\n          \\\"provider_name\\\": \\\"aws\\\",\\n          \\\"schema_version\\\": 1,\\n          \\\"values\\\": {\\n            \\\"description\\\": \\\"Seriously, why would anybody do this.\\\",\\n            \\\"name\\\": \\\"no_rules\\\",\\n            \\\"name_prefix\\\": null,\\n            \\\"revoke_rules_on_delete\\\": false,\\n            \\\"tags\\\": {\\n              \\\"Environment\\\": \\\"dev\\\",\\n              \\\"Name\\\": \\\"test_no_rules\\\"\\n            },\\n            \\\"timeouts\\\": null\\n          }\\n        },\\n        {\\n          \\\"address\\\": \\\"aws_security_group_rule.allow_all_egress1\\\",\\n          \\\"mode\\\": \\\"managed\\\",\\n          \\\"type\\\": \\\"aws_security_group_rule\\\",\\n          \\\"name\\\": \\\"allow_all_egress1\\\",\\n          \\\"provider_name\\\": \\\"aws\\\",\\n          \\\"schema_version\\\": 2,\\n          \\\"values\\\": {\\n            \\\"cidr_blocks\\\": [\\n              \\\"0.0.0.0/0\\\"\\n            ],\\n            \\\"description\\\": null,\\n            \\\"from_port\\\": 0,\\n            \\\"ipv6_cidr_blocks\\\": null,\\n            \\\"prefix_list_ids\\\": null,\\n            \\\"protocol\\\": \\\"-1\\\",\\n            \\\"self\\\": false,\\n            \\\"to_port\\\": 0,\\n            \\\"type\\\": \\\"egress\\\"\\n          }\\n        },\\n        {\\n          \\\"address\\\": \\\"aws_security_group_rule.allow_web_ingress_1\\\",\\n          \\\"mode\\\": \\\"managed\\\",\\n          \\\"type\\\": \\\"aws_security_group_rule\\\",\\n          \\\"name\\\": \\\"allow_web_ingress_1\\\",\\n          \\\"provider_name\\\": \\\"aws\\\",\\n          \\\"schema_version\\\": 2,\\n          \\\"values\\\": {\\n            \\\"cidr_blocks\\\": [\\n              \\\"0.0.0.0/0\\\"\\n            ],\\n            \\\"description\\\": null,\\n            \\\"from_port\\\": 80,\\n            \\\"ipv6_cidr_blocks\\\": null,\\n            \\\"prefix_list_ids\\\": null,\\n            \\\"protocol\\\": \\\"-1\\\",\\n            \\\"self\\\": false,\\n            \\\"to_port\\\": 80,\\n            \\\"type\\\": \\\"ingress\\\"\\n          }\\n        },\\n        {\\n          \\\"address\\\": \\\"aws_security_group_rule.allow_web_ingress_2\\\",\\n          \\\"mode\\\": \\\"managed\\\",\\n          \\\"type\\\": \\\"aws_security_group_rule\\\",\\n          \\\"name\\\": \\\"allow_web_ingress_2\\\",\\n          \\\"provider_name\\\": \\\"aws\\\",\\n          \\\"schema_version\\\": 2,\\n          \\\"values\\\": {\\n            \\\"cidr_blocks\\\": [\\n              \\\"0.0.0.0/0\\\"\\n            ],\\n            \\\"description\\\": null,\\n            \\\"from_port\\\": 443,\\n            \\\"ipv6_cidr_blocks\\\": null,\\n            \\\"prefix_list_ids\\\": null,\\n            \\\"protocol\\\": \\\"-1\\\",\\n            \\\"self\\\": false,\\n            \\\"to_port\\\": 443,\\n            \\\"type\\\": \\\"ingress\\\"\\n          }\\n        },\\n        {\\n          \\\"address\\\": \\\"aws_security_group_rule.allow_web_ingress_3\\\",\\n          \\\"mode\\\": \\\"managed\\\",\\n          \\\"type\\\": \\\"aws_security_group_rule\\\",\\n          \\\"name\\\": \\\"allow_web_ingress_3\\\",\\n          \\\"provider_name\\\": \\\"aws\\\",\\n          \\\"schema_version\\\": 2,\\n          \\\"values\\\": {\\n            \\\"cidr_blocks\\\": [\\n              \\\"0.0.0.0/0\\\"\\n            ],\\n            \\\"description\\\": null,\\n            \\\"from_port\\\": 8085,\\n            \\\"ipv6_cidr_blocks\\\": null,\\n            \\\"prefix_list_ids\\\": null,\\n            \\\"protocol\\\": \\\"-1\\\",\\n            \\\"self\\\": false,\\n            \\\"to_port\\\": 8007,\\n            \\\"type\\\": \\\"ingress\\\"\\n          }\\n        },\\n        {\\n          \\\"address\\\": \\\"aws_vpc.divvy_vpc\\\",\\n          \\\"mode\\\": \\\"managed\\\",\\n          \\\"type\\\": \\\"aws_vpc\\\",\\n          \\\"name\\\": \\\"divvy_vpc\\\",\\n          \\\"provider_name\\\": \\\"aws\\\",\\n          \\\"schema_version\\\": 1,\\n          \\\"values\\\": {\\n            \\\"assign_generated_ipv6_cidr_block\\\": false,\\n            \\\"cidr_block\\\": \\\"10.0.0.0/16\\\",\\n            \\\"enable_dns_support\\\": true,\\n            \\\"instance_tenancy\\\": \\\"default\\\",\\n            \\\"tags\\\": null\\n          }\\n        }\\n      ]\\n    }\\n  },\\n  \\\"resource_changes\\\": [\\n    {\\n      \\\"address\\\": \\\"aws_security_group.allow_web\\\",\\n      \\\"mode\\\": \\\"managed\\\",\\n      \\\"type\\\": \\\"aws_security_group\\\",\\n      \\\"name\\\": \\\"allow_web\\\",\\n      \\\"provider_name\\\": \\\"aws\\\",\\n      \\\"change\\\": {\\n        \\\"actions\\\": [\\n          \\\"create\\\"\\n        ],\\n        \\\"before\\\": null,\\n        \\\"after\\\": {\\n          \\\"description\\\": \\\"Allow web inbound traffic\\\",\\n          \\\"ingress\\\": [\\n            {\\n              \\\"cidr_blocks\\\": [\\n                \\\"0.0.0.0/0\\\"\\n              ],\\n              \\\"description\\\": \\\"\\\",\\n              \\\"from_port\\\": 443,\\n              \\\"ipv6_cidr_blocks\\\": [],\\n              \\\"prefix_list_ids\\\": [],\\n              \\\"protocol\\\": \\\"tcp\\\",\\n              \\\"security_groups\\\": [],\\n              \\\"self\\\": false,\\n              \\\"to_port\\\": 443\\n            },\\n            {\\n              \\\"cidr_blocks\\\": [\\n                \\\"0.0.0.0/0\\\"\\n              ],\\n              \\\"description\\\": \\\"\\\",\\n              \\\"from_port\\\": 80,\\n              \\\"ipv6_cidr_blocks\\\": [],\\n              \\\"prefix_list_ids\\\": [],\\n              \\\"protocol\\\": \\\"tcp\\\",\\n              \\\"security_groups\\\": [],\\n              \\\"self\\\": false,\\n              \\\"to_port\\\": 80\\n            }\\n          ],\\n          \\\"name\\\": \\\"allow_web\\\",\\n          \\\"name_prefix\\\": null,\\n          \\\"revoke_rules_on_delete\\\": false,\\n          \\\"tags\\\": {\\n            \\\"Name\\\": \\\"allow_all_web\\\"\\n          },\\n          \\\"timeouts\\\": null\\n        },\\n        \\\"after_unknown\\\": {\\n          \\\"arn\\\": true,\\n          \\\"egress\\\": true,\\n          \\\"id\\\": true,\\n          \\\"ingress\\\": [\\n            {\\n              \\\"cidr_blocks\\\": [\\n                false\\n              ],\\n              \\\"ipv6_cidr_blocks\\\": [],\\n              \\\"prefix_list_ids\\\": [],\\n              \\\"security_groups\\\": []\\n            },\\n            {\\n              \\\"cidr_blocks\\\": [\\n                false\\n              ],\\n              \\\"ipv6_cidr_blocks\\\": [],\\n              \\\"prefix_list_ids\\\": [],\\n              \\\"security_groups\\\": []\\n            }\\n          ],\\n          \\\"owner_id\\\": true,\\n          \\\"tags\\\": {},\\n          \\\"vpc_id\\\": true\\n        }\\n      }\\n    },\\n    {\\n      \\\"address\\\": \\\"aws_security_group.divvy_all\\\",\\n      \\\"mode\\\": \\\"managed\\\",\\n      \\\"type\\\": \\\"aws_security_group\\\",\\n      \\\"name\\\": \\\"divvy_all\\\",\\n      \\\"provider_name\\\": \\\"aws\\\",\\n      \\\"change\\\": {\\n        \\\"actions\\\": [\\n          \\\"create\\\"\\n        ],\\n        \\\"before\\\": null,\\n        \\\"after\\\": {\\n          \\\"description\\\": \\\"DivvyCloud Worker Nodes\\\",\\n          \\\"egress\\\": [\\n            {\\n              \\\"cidr_blocks\\\": [\\n                \\\"0.0.0.0/0\\\"\\n              ],\\n              \\\"description\\\": \\\"\\\",\\n              \\\"from_port\\\": 0,\\n              \\\"ipv6_cidr_blocks\\\": [],\\n              \\\"prefix_list_ids\\\": [],\\n              \\\"protocol\\\": \\\"-1\\\",\\n              \\\"security_groups\\\": [],\\n              \\\"self\\\": false,\\n              \\\"to_port\\\": 0\\n            }\\n          ],\\n          \\\"ingress\\\": [\\n            {\\n              \\\"cidr_blocks\\\": [],\\n              \\\"description\\\": \\\"\\\",\\n              \\\"from_port\\\": 0,\\n              \\\"ipv6_cidr_blocks\\\": [],\\n              \\\"prefix_list_ids\\\": [],\\n              \\\"protocol\\\": \\\"-1\\\",\\n              \\\"security_groups\\\": [],\\n              \\\"self\\\": false,\\n              \\\"to_port\\\": 0\\n            }\\n          ],\\n          \\\"name\\\": \\\"divvy_all\\\",\\n          \\\"name_prefix\\\": null,\\n          \\\"revoke_rules_on_delete\\\": false,\\n          \\\"tags\\\": {\\n            \\\"Name\\\": \\\"allow_all\\\",\\n            \\\"foo\\\": \\\"bar\\\"\\n          },\\n          \\\"timeouts\\\": null,\\n          \\\"vpc_id\\\": \\\"vpc-424c723b\\\"\\n        },\\n        \\\"after_unknown\\\": {\\n          \\\"arn\\\": true,\\n          \\\"egress\\\": [\\n            {\\n              \\\"cidr_blocks\\\": [\\n                false\\n              ],\\n              \\\"ipv6_cidr_blocks\\\": [],\\n              \\\"prefix_list_ids\\\": [],\\n              \\\"security_groups\\\": []\\n            }\\n          ],\\n          \\\"id\\\": true,\\n          \\\"ingress\\\": [\\n            {\\n              \\\"cidr_blocks\\\": [],\\n              \\\"ipv6_cidr_blocks\\\": [],\\n              \\\"prefix_list_ids\\\": [],\\n              \\\"security_groups\\\": []\\n            }\\n          ],\\n          \\\"owner_id\\\": true,\\n          \\\"tags\\\": {}\\n        }\\n      }\\n    },\\n    {\\n      \\\"address\\\": \\\"aws_security_group.divvy_foo\\\",\\n      \\\"mode\\\": \\\"managed\\\",\\n      \\\"type\\\": \\\"aws_security_group\\\",\\n      \\\"name\\\": \\\"divvy_foo\\\",\\n      \\\"provider_name\\\": \\\"aws\\\",\\n      \\\"change\\\": {\\n        \\\"actions\\\": [\\n          \\\"create\\\"\\n        ],\\n        \\\"before\\\": null,\\n        \\\"after\\\": {\\n          \\\"description\\\": \\\"DivvyCloud Worker Nodes\\\",\\n          \\\"name\\\": \\\"divvy_all2\\\",\\n          \\\"name_prefix\\\": null,\\n          \\\"revoke_rules_on_delete\\\": false,\\n          \\\"tags\\\": null,\\n          \\\"timeouts\\\": null\\n        },\\n        \\\"after_unknown\\\": {\\n          \\\"arn\\\": true,\\n          \\\"egress\\\": true,\\n          \\\"id\\\": true,\\n          \\\"ingress\\\": true,\\n          \\\"owner_id\\\": true,\\n          \\\"vpc_id\\\": true\\n        }\\n      }\\n    },\\n    {\\n      \\\"address\\\": \\\"aws_security_group.no_rules\\\",\\n      \\\"mode\\\": \\\"managed\\\",\\n      \\\"type\\\": \\\"aws_security_group\\\",\\n      \\\"name\\\": \\\"no_rules\\\",\\n      \\\"provider_name\\\": \\\"aws\\\",\\n      \\\"change\\\": {\\n        \\\"actions\\\": [\\n          \\\"create\\\"\\n        ],\\n        \\\"before\\\": null,\\n        \\\"after\\\": {\\n          \\\"description\\\": \\\"Seriously, why would anybody do this.\\\",\\n          \\\"name\\\": \\\"no_rules\\\",\\n          \\\"name_prefix\\\": null,\\n          \\\"revoke_rules_on_delete\\\": false,\\n          \\\"tags\\\": {\\n            \\\"Environment\\\": \\\"dev\\\",\\n            \\\"Name\\\": \\\"test_no_rules\\\"\\n          },\\n          \\\"timeouts\\\": null\\n        },\\n        \\\"after_unknown\\\": {\\n          \\\"arn\\\": true,\\n          \\\"egress\\\": true,\\n          \\\"id\\\": true,\\n          \\\"ingress\\\": true,\\n          \\\"owner_id\\\": true,\\n          \\\"tags\\\": {},\\n          \\\"vpc_id\\\": true\\n        }\\n      }\\n    },\\n    {\\n      \\\"address\\\": \\\"aws_security_group_rule.allow_all_egress1\\\",\\n      \\\"mode\\\": \\\"managed\\\",\\n      \\\"type\\\": \\\"aws_security_group_rule\\\",\\n      \\\"name\\\": \\\"allow_all_egress1\\\",\\n      \\\"provider_name\\\": \\\"aws\\\",\\n      \\\"change\\\": {\\n        \\\"actions\\\": [\\n          \\\"create\\\"\\n        ],\\n        \\\"before\\\": null,\\n        \\\"after\\\": {\\n          \\\"cidr_blocks\\\": [\\n            \\\"0.0.0.0/0\\\"\\n          ],\\n          \\\"description\\\": null,\\n          \\\"from_port\\\": 0,\\n          \\\"ipv6_cidr_blocks\\\": null,\\n          \\\"prefix_list_ids\\\": null,\\n          \\\"protocol\\\": \\\"-1\\\",\\n          \\\"self\\\": false,\\n          \\\"to_port\\\": 0,\\n          \\\"type\\\": \\\"egress\\\"\\n        },\\n        \\\"after_unknown\\\": {\\n          \\\"cidr_blocks\\\": [\\n            false\\n          ],\\n          \\\"id\\\": true,\\n          \\\"security_group_id\\\": true,\\n          \\\"source_security_group_id\\\": true\\n        }\\n      }\\n    },\\n    {\\n      \\\"address\\\": \\\"aws_security_group_rule.allow_web_ingress_1\\\",\\n      \\\"mode\\\": \\\"managed\\\",\\n      \\\"type\\\": \\\"aws_security_group_rule\\\",\\n      \\\"name\\\": \\\"allow_web_ingress_1\\\",\\n      \\\"provider_name\\\": \\\"aws\\\",\\n      \\\"change\\\": {\\n        \\\"actions\\\": [\\n          \\\"create\\\"\\n        ],\\n        \\\"before\\\": null,\\n        \\\"after\\\": {\\n          \\\"cidr_blocks\\\": [\\n            \\\"0.0.0.0/0\\\"\\n          ],\\n          \\\"description\\\": null,\\n          \\\"from_port\\\": 80,\\n          \\\"ipv6_cidr_blocks\\\": null,\\n          \\\"prefix_list_ids\\\": null,\\n          \\\"protocol\\\": \\\"-1\\\",\\n          \\\"self\\\": false,\\n          \\\"to_port\\\": 80,\\n          \\\"type\\\": \\\"ingress\\\"\\n        },\\n        \\\"after_unknown\\\": {\\n          \\\"cidr_blocks\\\": [\\n            false\\n          ],\\n          \\\"id\\\": true,\\n          \\\"security_group_id\\\": true,\\n          \\\"source_security_group_id\\\": true\\n        }\\n      }\\n    },\\n    {\\n      \\\"address\\\": \\\"aws_security_group_rule.allow_web_ingress_2\\\",\\n      \\\"mode\\\": \\\"managed\\\",\\n      \\\"type\\\": \\\"aws_security_group_rule\\\",\\n      \\\"name\\\": \\\"allow_web_ingress_2\\\",\\n      \\\"provider_name\\\": \\\"aws\\\",\\n      \\\"change\\\": {\\n        \\\"actions\\\": [\\n          \\\"create\\\"\\n        ],\\n        \\\"before\\\": null,\\n        \\\"after\\\": {\\n          \\\"cidr_blocks\\\": [\\n            \\\"0.0.0.0/0\\\"\\n          ],\\n          \\\"description\\\": null,\\n          \\\"from_port\\\": 443,\\n          \\\"ipv6_cidr_blocks\\\": null,\\n          \\\"prefix_list_ids\\\": null,\\n          \\\"protocol\\\": \\\"-1\\\",\\n          \\\"self\\\": false,\\n          \\\"to_port\\\": 443,\\n          \\\"type\\\": \\\"ingress\\\"\\n        },\\n        \\\"after_unknown\\\": {\\n          \\\"cidr_blocks\\\": [\\n            false\\n          ],\\n          \\\"id\\\": true,\\n          \\\"security_group_id\\\": true,\\n          \\\"source_security_group_id\\\": true\\n        }\\n      }\\n    },\\n    {\\n      \\\"address\\\": \\\"aws_security_group_rule.allow_web_ingress_3\\\",\\n      \\\"mode\\\": \\\"managed\\\",\\n      \\\"type\\\": \\\"aws_security_group_rule\\\",\\n      \\\"name\\\": \\\"allow_web_ingress_3\\\",\\n      \\\"provider_name\\\": \\\"aws\\\",\\n      \\\"change\\\": {\\n        \\\"actions\\\": [\\n          \\\"create\\\"\\n        ],\\n        \\\"before\\\": null,\\n        \\\"after\\\": {\\n          \\\"cidr_blocks\\\": [\\n            \\\"0.0.0.0/0\\\"\\n          ],\\n          \\\"description\\\": null,\\n          \\\"from_port\\\": 8085,\\n          \\\"ipv6_cidr_blocks\\\": null,\\n          \\\"prefix_list_ids\\\": null,\\n          \\\"protocol\\\": \\\"-1\\\",\\n          \\\"self\\\": false,\\n          \\\"to_port\\\": 8007,\\n          \\\"type\\\": \\\"ingress\\\"\\n        },\\n        \\\"after_unknown\\\": {\\n          \\\"cidr_blocks\\\": [\\n            false\\n          ],\\n          \\\"id\\\": true,\\n          \\\"security_group_id\\\": true,\\n          \\\"source_security_group_id\\\": true\\n        }\\n      }\\n    },\\n    {\\n      \\\"address\\\": \\\"aws_vpc.divvy_vpc\\\",\\n      \\\"mode\\\": \\\"managed\\\",\\n      \\\"type\\\": \\\"aws_vpc\\\",\\n      \\\"name\\\": \\\"divvy_vpc\\\",\\n      \\\"provider_name\\\": \\\"aws\\\",\\n      \\\"change\\\": {\\n        \\\"actions\\\": [\\n          \\\"create\\\"\\n        ],\\n        \\\"before\\\": null,\\n        \\\"after\\\": {\\n          \\\"assign_generated_ipv6_cidr_block\\\": false,\\n          \\\"cidr_block\\\": \\\"10.0.0.0/16\\\",\\n          \\\"enable_dns_support\\\": true,\\n          \\\"instance_tenancy\\\": \\\"default\\\",\\n          \\\"tags\\\": null\\n        },\\n        \\\"after_unknown\\\": {\\n          \\\"arn\\\": true,\\n          \\\"default_network_acl_id\\\": true,\\n          \\\"default_route_table_id\\\": true,\\n          \\\"default_security_group_id\\\": true,\\n          \\\"dhcp_options_id\\\": true,\\n          \\\"enable_classiclink\\\": true,\\n          \\\"enable_classiclink_dns_support\\\": true,\\n          \\\"enable_dns_hostnames\\\": true,\\n          \\\"id\\\": true,\\n          \\\"ipv6_association_id\\\": true,\\n          \\\"ipv6_cidr_block\\\": true,\\n          \\\"main_route_table_id\\\": true,\\n          \\\"owner_id\\\": true\\n        }\\n      }\\n    }\\n  ],\\n  \\\"configuration\\\": {\\n    \\\"provider_config\\\": {\\n      \\\"aws\\\": {\\n        \\\"name\\\": \\\"aws\\\",\\n        \\\"expressions\\\": {\\n          \\\"region\\\": {\\n            \\\"constant_value\\\": \\\"us-west-2\\\"\\n          }\\n        }\\n      }\\n    },\\n    \\\"root_module\\\": {\\n      \\\"resources\\\": [\\n        {\\n          \\\"address\\\": \\\"aws_security_group.allow_web\\\",\\n          \\\"mode\\\": \\\"managed\\\",\\n          \\\"type\\\": \\\"aws_security_group\\\",\\n          \\\"name\\\": \\\"allow_web\\\",\\n          \\\"provider_config_key\\\": \\\"aws\\\",\\n          \\\"expressions\\\": {\\n            \\\"description\\\": {\\n              \\\"constant_value\\\": \\\"Allow web inbound traffic\\\"\\n            },\\n            \\\"name\\\": {\\n              \\\"constant_value\\\": \\\"allow_web\\\"\\n            },\\n            \\\"tags\\\": {\\n              \\\"constant_value\\\": {\\n                \\\"Name\\\": \\\"allow_all_web\\\"\\n              }\\n            },\\n            \\\"vpc_id\\\": {\\n              \\\"references\\\": [\\n                \\\"aws_vpc.divvy_vpc\\\"\\n              ]\\n            }\\n          },\\n          \\\"schema_version\\\": 1\\n        },\\n        {\\n          \\\"address\\\": \\\"aws_security_group.divvy_all\\\",\\n          \\\"mode\\\": \\\"managed\\\",\\n          \\\"type\\\": \\\"aws_security_group\\\",\\n          \\\"name\\\": \\\"divvy_all\\\",\\n          \\\"provider_config_key\\\": \\\"aws\\\",\\n          \\\"expressions\\\": {\\n            \\\"description\\\": {\\n              \\\"constant_value\\\": \\\"DivvyCloud Worker Nodes\\\"\\n            },\\n            \\\"name\\\": {\\n              \\\"constant_value\\\": \\\"divvy_all\\\"\\n            },\\n            \\\"tags\\\": {\\n              \\\"constant_value\\\": {\\n                \\\"Name\\\": \\\"allow_all\\\",\\n                \\\"foo\\\": \\\"bar\\\"\\n              }\\n            },\\n            \\\"vpc_id\\\": {\\n              \\\"references\\\": [\\n                \\\"data.aws_vpc.default\\\"\\n              ]\\n            }\\n          },\\n          \\\"schema_version\\\": 1\\n        },\\n        {\\n          \\\"address\\\": \\\"aws_security_group.divvy_foo\\\",\\n          \\\"mode\\\": \\\"managed\\\",\\n          \\\"type\\\": \\\"aws_security_group\\\",\\n          \\\"name\\\": \\\"divvy_foo\\\",\\n          \\\"provider_config_key\\\": \\\"aws\\\",\\n          \\\"expressions\\\": {\\n            \\\"description\\\": {\\n              \\\"constant_value\\\": \\\"DivvyCloud Worker Nodes\\\"\\n            },\\n            \\\"name\\\": {\\n              \\\"constant_value\\\": \\\"divvy_all2\\\"\\n            }\\n          },\\n          \\\"schema_version\\\": 1\\n        },\\n        {\\n          \\\"address\\\": \\\"aws_security_group.no_rules\\\",\\n          \\\"mode\\\": \\\"managed\\\",\\n          \\\"type\\\": \\\"aws_security_group\\\",\\n          \\\"name\\\": \\\"no_rules\\\",\\n          \\\"provider_config_key\\\": \\\"aws\\\",\\n          \\\"expressions\\\": {\\n            \\\"description\\\": {\\n              \\\"constant_value\\\": \\\"Seriously, why would anybody do this.\\\"\\n            },\\n            \\\"name\\\": {\\n              \\\"constant_value\\\": \\\"no_rules\\\"\\n            },\\n            \\\"tags\\\": {\\n              \\\"constant_value\\\": {\\n                \\\"Environment\\\": \\\"dev\\\",\\n                \\\"Name\\\": \\\"test_no_rules\\\"\\n              }\\n            }\\n          },\\n          \\\"schema_version\\\": 1\\n        },\\n        {\\n          \\\"address\\\": \\\"aws_security_group_rule.allow_all_egress1\\\",\\n          \\\"mode\\\": \\\"managed\\\",\\n          \\\"type\\\": \\\"aws_security_group_rule\\\",\\n          \\\"name\\\": \\\"allow_all_egress1\\\",\\n          \\\"provider_config_key\\\": \\\"aws\\\",\\n          \\\"expressions\\\": {\\n            \\\"cidr_blocks\\\": {\\n              \\\"constant_value\\\": [\\n                \\\"0.0.0.0/0\\\"\\n              ]\\n            },\\n            \\\"from_port\\\": {\\n              \\\"constant_value\\\": 0\\n            },\\n            \\\"protocol\\\": {\\n              \\\"constant_value\\\": \\\"-1\\\"\\n            },\\n            \\\"security_group_id\\\": {\\n              \\\"references\\\": [\\n                \\\"aws_security_group.divvy_foo\\\"\\n              ]\\n            },\\n            \\\"to_port\\\": {\\n              \\\"constant_value\\\": 0\\n            },\\n            \\\"type\\\": {\\n              \\\"constant_value\\\": \\\"egress\\\"\\n            }\\n          },\\n          \\\"schema_version\\\": 2\\n        },\\n        {\\n          \\\"address\\\": \\\"aws_security_group_rule.allow_web_ingress_1\\\",\\n          \\\"mode\\\": \\\"managed\\\",\\n          \\\"type\\\": \\\"aws_security_group_rule\\\",\\n          \\\"name\\\": \\\"allow_web_ingress_1\\\",\\n          \\\"provider_config_key\\\": \\\"aws\\\",\\n          \\\"expressions\\\": {\\n            \\\"cidr_blocks\\\": {\\n              \\\"constant_value\\\": [\\n                \\\"0.0.0.0/0\\\"\\n              ]\\n            },\\n            \\\"from_port\\\": {\\n              \\\"constant_value\\\": 80\\n            },\\n            \\\"protocol\\\": {\\n              \\\"constant_value\\\": \\\"-1\\\"\\n            },\\n            \\\"security_group_id\\\": {\\n              \\\"references\\\": [\\n                \\\"aws_security_group.divvy_foo\\\"\\n              ]\\n            },\\n            \\\"to_port\\\": {\\n              \\\"constant_value\\\": 80\\n            },\\n            \\\"type\\\": {\\n              \\\"constant_value\\\": \\\"ingress\\\"\\n            }\\n          },\\n          \\\"schema_version\\\": 2\\n        },\\n        {\\n          \\\"address\\\": \\\"aws_security_group_rule.allow_web_ingress_2\\\",\\n          \\\"mode\\\": \\\"managed\\\",\\n          \\\"type\\\": \\\"aws_security_group_rule\\\",\\n          \\\"name\\\": \\\"allow_web_ingress_2\\\",\\n          \\\"provider_config_key\\\": \\\"aws\\\",\\n          \\\"expressions\\\": {\\n            \\\"cidr_blocks\\\": {\\n              \\\"constant_value\\\": [\\n                \\\"0.0.0.0/0\\\"\\n              ]\\n            },\\n            \\\"from_port\\\": {\\n              \\\"constant_value\\\": 443\\n            },\\n            \\\"protocol\\\": {\\n              \\\"constant_value\\\": \\\"-1\\\"\\n            },\\n            \\\"security_group_id\\\": {\\n              \\\"references\\\": [\\n                \\\"aws_security_group.divvy_foo\\\"\\n              ]\\n            },\\n            \\\"to_port\\\": {\\n              \\\"constant_value\\\": 443\\n            },\\n            \\\"type\\\": {\\n              \\\"constant_value\\\": \\\"ingress\\\"\\n            }\\n          },\\n          \\\"schema_version\\\": 2\\n        },\\n        {\\n          \\\"address\\\": \\\"aws_security_group_rule.allow_web_ingress_3\\\",\\n          \\\"mode\\\": \\\"managed\\\",\\n          \\\"type\\\": \\\"aws_security_group_rule\\\",\\n          \\\"name\\\": \\\"allow_web_ingress_3\\\",\\n          \\\"provider_config_key\\\": \\\"aws\\\",\\n          \\\"expressions\\\": {\\n            \\\"cidr_blocks\\\": {\\n              \\\"constant_value\\\": [\\n                \\\"0.0.0.0/0\\\"\\n              ]\\n            },\\n            \\\"from_port\\\": {\\n              \\\"constant_value\\\": 8085\\n            },\\n            \\\"protocol\\\": {\\n              \\\"constant_value\\\": \\\"-1\\\"\\n            },\\n            \\\"security_group_id\\\": {\\n              \\\"references\\\": [\\n                \\\"aws_security_group.divvy_foo\\\"\\n              ]\\n            },\\n            \\\"to_port\\\": {\\n              \\\"constant_value\\\": 8007\\n            },\\n            \\\"type\\\": {\\n              \\\"constant_value\\\": \\\"ingress\\\"\\n            }\\n          },\\n          \\\"schema_version\\\": 2\\n        },\\n        {\\n          \\\"address\\\": \\\"aws_vpc.divvy_vpc\\\",\\n          \\\"mode\\\": \\\"managed\\\",\\n          \\\"type\\\": \\\"aws_vpc\\\",\\n          \\\"name\\\": \\\"divvy_vpc\\\",\\n          \\\"provider_config_key\\\": \\\"aws\\\",\\n          \\\"expressions\\\": {\\n            \\\"cidr_block\\\": {\\n              \\\"constant_value\\\": \\\"10.0.0.0/16\\\"\\n            }\\n          },\\n          \\\"schema_version\\\": 1\\n        },\\n        {\\n          \\\"address\\\": \\\"data.aws_vpc.default\\\",\\n          \\\"mode\\\": \\\"data\\\",\\n          \\\"type\\\": \\\"aws_vpc\\\",\\n          \\\"name\\\": \\\"default\\\",\\n          \\\"provider_config_key\\\": \\\"aws\\\",\\n          \\\"schema_version\\\": 0\\n        }\\n      ]\\n    }\\n  }\\n}\\n\",\n    \"scan_type\": \"inline\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/v3/iac/scan?organization_id=307",
							"host": [
								"{{domain}}"
							],
							"path": [
								"v3",
								"iac",
								"scan"
							],
							"query": [
								{
									"key": "organization_id",
									"value": "307"
								}
							]
						}
					},
					"response": [
						{
							"name": "Create User",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"value": "{{X-Token-Auth}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"authentication_type\":\"internal\",\n\t\"name\":\"James Smith\",\n\t\"username\":\"jamessmith\",\n\t\"email\":\"jamessmith@divvycloud.com\",\n\t\"access_level\":\"BASIC_USER\",\n\t\"password\":\"Password12345\",\n\t\"confirm_password\":\"Password12345\"\n}"
								},
								"url": {
									"raw": "{{domain}}/v2/public/user/create",
									"host": [
										"{{domain}}"
									],
									"path": [
										"v2",
										"public",
										"user",
										"create"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Headers",
									"value": "Origin, X-Requested-With, Content-Type, Accept",
									"name": "Access-Control-Allow-Headers",
									"description": ""
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "POST, GET, OPTIONS",
									"name": "Access-Control-Allow-Methods",
									"description": ""
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*",
									"name": "Access-Control-Allow-Origin",
									"description": ""
								},
								{
									"key": "Content-Length",
									"value": "296",
									"name": "Content-Length",
									"description": ""
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": ""
								},
								{
									"key": "Date",
									"value": "Wed, 25 Oct 2017 14:37:11 GMT",
									"name": "Date",
									"description": ""
								},
								{
									"key": "Server",
									"value": "waitress",
									"name": "Server",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\n\t\"username\": \"jamessmith\",\n\t\"two_factor_enabled\": false,\n\t\"user_id\": 7,\n\t\"name\": \"James Smith\",\n\t\"resource_id\": \"divvyuser:7:\",\n\t\"two_factor_required\": false,\n\t\"organization_name\": \"Default Organization\",\n\t\"domain_admin\": false,\n\t\"email_address\": \"jamessmith@divvycloud.com\",\n\t\"organization_admin\": false\n}"
						}
					]
				},
				{
					"name": "Scan with API Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{api_key}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Api-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"config_name\":\"Nist for API Testing\",\"scan_name\":\"Instant Scan\",\"author_name\":\"John Smith\",\"iac_provider\":\"terraform\",\"scan_template\":\"{\\n  \\\"format_version\\\": \\\"0.1\\\",\\n  \\\"terraform_version\\\": \\\"0.12.1\\\",\\n  \\\"planned_values\\\": {\\n    \\\"root_module\\\": {\\n      \\\"resources\\\": [\\n        {\\n          \\\"address\\\": \\\"aws_security_group.allow_web\\\",\\n          \\\"mode\\\": \\\"managed\\\",\\n          \\\"type\\\": \\\"aws_security_group\\\",\\n          \\\"name\\\": \\\"allow_web\\\",\\n          \\\"provider_name\\\": \\\"aws\\\",\\n          \\\"schema_version\\\": 1,\\n          \\\"values\\\": {\\n            \\\"description\\\": \\\"Allow web inbound traffic\\\",\\n            \\\"ingress\\\": [\\n              {\\n                \\\"cidr_blocks\\\": [\\n                  \\\"0.0.0.0/0\\\"\\n                ],\\n                \\\"description\\\": \\\"\\\",\\n                \\\"from_port\\\": 443,\\n                \\\"ipv6_cidr_blocks\\\": [],\\n                \\\"prefix_list_ids\\\": [],\\n                \\\"protocol\\\": \\\"tcp\\\",\\n                \\\"security_groups\\\": [],\\n                \\\"self\\\": false,\\n                \\\"to_port\\\": 443\\n              },\\n              {\\n                \\\"cidr_blocks\\\": [\\n                  \\\"0.0.0.0/0\\\"\\n                ],\\n                \\\"description\\\": \\\"\\\",\\n                \\\"from_port\\\": 80,\\n                \\\"ipv6_cidr_blocks\\\": [],\\n                \\\"prefix_list_ids\\\": [],\\n                \\\"protocol\\\": \\\"tcp\\\",\\n                \\\"security_groups\\\": [],\\n                \\\"self\\\": false,\\n                \\\"to_port\\\": 80\\n              }\\n            ],\\n            \\\"name\\\": \\\"allow_web\\\",\\n            \\\"name_prefix\\\": null,\\n            \\\"revoke_rules_on_delete\\\": false,\\n            \\\"tags\\\": {\\n              \\\"Name\\\": \\\"allow_all_web\\\"\\n            },\\n            \\\"timeouts\\\": null\\n          }\\n        },\\n        {\\n          \\\"address\\\": \\\"aws_security_group.divvy_all\\\",\\n          \\\"mode\\\": \\\"managed\\\",\\n          \\\"type\\\": \\\"aws_security_group\\\",\\n          \\\"name\\\": \\\"divvy_all\\\",\\n          \\\"provider_name\\\": \\\"aws\\\",\\n          \\\"schema_version\\\": 1,\\n          \\\"values\\\": {\\n            \\\"description\\\": \\\"DivvyCloud Worker Nodes\\\",\\n            \\\"egress\\\": [\\n              {\\n                \\\"cidr_blocks\\\": [\\n                  \\\"0.0.0.0/0\\\"\\n                ],\\n                \\\"description\\\": \\\"\\\",\\n                \\\"from_port\\\": 0,\\n                \\\"ipv6_cidr_blocks\\\": [],\\n                \\\"prefix_list_ids\\\": [],\\n                \\\"protocol\\\": \\\"-1\\\",\\n                \\\"security_groups\\\": [],\\n                \\\"self\\\": false,\\n                \\\"to_port\\\": 0\\n              }\\n            ],\\n            \\\"ingress\\\": [\\n              {\\n                \\\"cidr_blocks\\\": [],\\n                \\\"description\\\": \\\"\\\",\\n                \\\"from_port\\\": 0,\\n                \\\"ipv6_cidr_blocks\\\": [],\\n                \\\"prefix_list_ids\\\": [],\\n                \\\"protocol\\\": \\\"-1\\\",\\n                \\\"security_groups\\\": [],\\n                \\\"self\\\": false,\\n                \\\"to_port\\\": 0\\n              }\\n            ],\\n            \\\"name\\\": \\\"divvy_all\\\",\\n            \\\"name_prefix\\\": null,\\n            \\\"revoke_rules_on_delete\\\": false,\\n            \\\"tags\\\": {\\n              \\\"Name\\\": \\\"allow_all\\\",\\n              \\\"foo\\\": \\\"bar\\\"\\n            },\\n            \\\"timeouts\\\": null,\\n            \\\"vpc_id\\\": \\\"vpc-424c723b\\\"\\n          }\\n        },\\n        {\\n          \\\"address\\\": \\\"aws_security_group.divvy_foo\\\",\\n          \\\"mode\\\": \\\"managed\\\",\\n          \\\"type\\\": \\\"aws_security_group\\\",\\n          \\\"name\\\": \\\"divvy_foo\\\",\\n          \\\"provider_name\\\": \\\"aws\\\",\\n          \\\"schema_version\\\": 1,\\n          \\\"values\\\": {\\n            \\\"description\\\": \\\"DivvyCloud Worker Nodes\\\",\\n            \\\"name\\\": \\\"divvy_all2\\\",\\n            \\\"name_prefix\\\": null,\\n            \\\"revoke_rules_on_delete\\\": false,\\n            \\\"tags\\\": null,\\n            \\\"timeouts\\\": null\\n          }\\n        },\\n        {\\n          \\\"address\\\": \\\"aws_security_group.no_rules\\\",\\n          \\\"mode\\\": \\\"managed\\\",\\n          \\\"type\\\": \\\"aws_security_group\\\",\\n          \\\"name\\\": \\\"no_rules\\\",\\n          \\\"provider_name\\\": \\\"aws\\\",\\n          \\\"schema_version\\\": 1,\\n          \\\"values\\\": {\\n            \\\"description\\\": \\\"Seriously, why would anybody do this.\\\",\\n            \\\"name\\\": \\\"no_rules\\\",\\n            \\\"name_prefix\\\": null,\\n            \\\"revoke_rules_on_delete\\\": false,\\n            \\\"tags\\\": {\\n              \\\"Environment\\\": \\\"dev\\\",\\n              \\\"Name\\\": \\\"test_no_rules\\\"\\n            },\\n            \\\"timeouts\\\": null\\n          }\\n        },\\n        {\\n          \\\"address\\\": \\\"aws_security_group_rule.allow_all_egress1\\\",\\n          \\\"mode\\\": \\\"managed\\\",\\n          \\\"type\\\": \\\"aws_security_group_rule\\\",\\n          \\\"name\\\": \\\"allow_all_egress1\\\",\\n          \\\"provider_name\\\": \\\"aws\\\",\\n          \\\"schema_version\\\": 2,\\n          \\\"values\\\": {\\n            \\\"cidr_blocks\\\": [\\n              \\\"0.0.0.0/0\\\"\\n            ],\\n            \\\"description\\\": null,\\n            \\\"from_port\\\": 0,\\n            \\\"ipv6_cidr_blocks\\\": null,\\n            \\\"prefix_list_ids\\\": null,\\n            \\\"protocol\\\": \\\"-1\\\",\\n            \\\"self\\\": false,\\n            \\\"to_port\\\": 0,\\n            \\\"type\\\": \\\"egress\\\"\\n          }\\n        },\\n        {\\n          \\\"address\\\": \\\"aws_security_group_rule.allow_web_ingress_1\\\",\\n          \\\"mode\\\": \\\"managed\\\",\\n          \\\"type\\\": \\\"aws_security_group_rule\\\",\\n          \\\"name\\\": \\\"allow_web_ingress_1\\\",\\n          \\\"provider_name\\\": \\\"aws\\\",\\n          \\\"schema_version\\\": 2,\\n          \\\"values\\\": {\\n            \\\"cidr_blocks\\\": [\\n              \\\"0.0.0.0/0\\\"\\n            ],\\n            \\\"description\\\": null,\\n            \\\"from_port\\\": 80,\\n            \\\"ipv6_cidr_blocks\\\": null,\\n            \\\"prefix_list_ids\\\": null,\\n            \\\"protocol\\\": \\\"-1\\\",\\n            \\\"self\\\": false,\\n            \\\"to_port\\\": 80,\\n            \\\"type\\\": \\\"ingress\\\"\\n          }\\n        },\\n        {\\n          \\\"address\\\": \\\"aws_security_group_rule.allow_web_ingress_2\\\",\\n          \\\"mode\\\": \\\"managed\\\",\\n          \\\"type\\\": \\\"aws_security_group_rule\\\",\\n          \\\"name\\\": \\\"allow_web_ingress_2\\\",\\n          \\\"provider_name\\\": \\\"aws\\\",\\n          \\\"schema_version\\\": 2,\\n          \\\"values\\\": {\\n            \\\"cidr_blocks\\\": [\\n              \\\"0.0.0.0/0\\\"\\n            ],\\n            \\\"description\\\": null,\\n            \\\"from_port\\\": 443,\\n            \\\"ipv6_cidr_blocks\\\": null,\\n            \\\"prefix_list_ids\\\": null,\\n            \\\"protocol\\\": \\\"-1\\\",\\n            \\\"self\\\": false,\\n            \\\"to_port\\\": 443,\\n            \\\"type\\\": \\\"ingress\\\"\\n          }\\n        },\\n        {\\n          \\\"address\\\": \\\"aws_security_group_rule.allow_web_ingress_3\\\",\\n          \\\"mode\\\": \\\"managed\\\",\\n          \\\"type\\\": \\\"aws_security_group_rule\\\",\\n          \\\"name\\\": \\\"allow_web_ingress_3\\\",\\n          \\\"provider_name\\\": \\\"aws\\\",\\n          \\\"schema_version\\\": 2,\\n          \\\"values\\\": {\\n            \\\"cidr_blocks\\\": [\\n              \\\"0.0.0.0/0\\\"\\n            ],\\n            \\\"description\\\": null,\\n            \\\"from_port\\\": 8085,\\n            \\\"ipv6_cidr_blocks\\\": null,\\n            \\\"prefix_list_ids\\\": null,\\n            \\\"protocol\\\": \\\"-1\\\",\\n            \\\"self\\\": false,\\n            \\\"to_port\\\": 8007,\\n            \\\"type\\\": \\\"ingress\\\"\\n          }\\n        },\\n        {\\n          \\\"address\\\": \\\"aws_vpc.divvy_vpc\\\",\\n          \\\"mode\\\": \\\"managed\\\",\\n          \\\"type\\\": \\\"aws_vpc\\\",\\n          \\\"name\\\": \\\"divvy_vpc\\\",\\n          \\\"provider_name\\\": \\\"aws\\\",\\n          \\\"schema_version\\\": 1,\\n          \\\"values\\\": {\\n            \\\"assign_generated_ipv6_cidr_block\\\": false,\\n            \\\"cidr_block\\\": \\\"10.0.0.0/16\\\",\\n            \\\"enable_dns_support\\\": true,\\n            \\\"instance_tenancy\\\": \\\"default\\\",\\n            \\\"tags\\\": null\\n          }\\n        }\\n      ]\\n    }\\n  },\\n  \\\"resource_changes\\\": [\\n    {\\n      \\\"address\\\": \\\"aws_security_group.allow_web\\\",\\n      \\\"mode\\\": \\\"managed\\\",\\n      \\\"type\\\": \\\"aws_security_group\\\",\\n      \\\"name\\\": \\\"allow_web\\\",\\n      \\\"provider_name\\\": \\\"aws\\\",\\n      \\\"change\\\": {\\n        \\\"actions\\\": [\\n          \\\"create\\\"\\n        ],\\n        \\\"before\\\": null,\\n        \\\"after\\\": {\\n          \\\"description\\\": \\\"Allow web inbound traffic\\\",\\n          \\\"ingress\\\": [\\n            {\\n              \\\"cidr_blocks\\\": [\\n                \\\"0.0.0.0/0\\\"\\n              ],\\n              \\\"description\\\": \\\"\\\",\\n              \\\"from_port\\\": 443,\\n              \\\"ipv6_cidr_blocks\\\": [],\\n              \\\"prefix_list_ids\\\": [],\\n              \\\"protocol\\\": \\\"tcp\\\",\\n              \\\"security_groups\\\": [],\\n              \\\"self\\\": false,\\n              \\\"to_port\\\": 443\\n            },\\n            {\\n              \\\"cidr_blocks\\\": [\\n                \\\"0.0.0.0/0\\\"\\n              ],\\n              \\\"description\\\": \\\"\\\",\\n              \\\"from_port\\\": 80,\\n              \\\"ipv6_cidr_blocks\\\": [],\\n              \\\"prefix_list_ids\\\": [],\\n              \\\"protocol\\\": \\\"tcp\\\",\\n              \\\"security_groups\\\": [],\\n              \\\"self\\\": false,\\n              \\\"to_port\\\": 80\\n            }\\n          ],\\n          \\\"name\\\": \\\"allow_web\\\",\\n          \\\"name_prefix\\\": null,\\n          \\\"revoke_rules_on_delete\\\": false,\\n          \\\"tags\\\": {\\n            \\\"Name\\\": \\\"allow_all_web\\\"\\n          },\\n          \\\"timeouts\\\": null\\n        },\\n        \\\"after_unknown\\\": {\\n          \\\"arn\\\": true,\\n          \\\"egress\\\": true,\\n          \\\"id\\\": true,\\n          \\\"ingress\\\": [\\n            {\\n              \\\"cidr_blocks\\\": [\\n                false\\n              ],\\n              \\\"ipv6_cidr_blocks\\\": [],\\n              \\\"prefix_list_ids\\\": [],\\n              \\\"security_groups\\\": []\\n            },\\n            {\\n              \\\"cidr_blocks\\\": [\\n                false\\n              ],\\n              \\\"ipv6_cidr_blocks\\\": [],\\n              \\\"prefix_list_ids\\\": [],\\n              \\\"security_groups\\\": []\\n            }\\n          ],\\n          \\\"owner_id\\\": true,\\n          \\\"tags\\\": {},\\n          \\\"vpc_id\\\": true\\n        }\\n      }\\n    },\\n    {\\n      \\\"address\\\": \\\"aws_security_group.divvy_all\\\",\\n      \\\"mode\\\": \\\"managed\\\",\\n      \\\"type\\\": \\\"aws_security_group\\\",\\n      \\\"name\\\": \\\"divvy_all\\\",\\n      \\\"provider_name\\\": \\\"aws\\\",\\n      \\\"change\\\": {\\n        \\\"actions\\\": [\\n          \\\"create\\\"\\n        ],\\n        \\\"before\\\": null,\\n        \\\"after\\\": {\\n          \\\"description\\\": \\\"DivvyCloud Worker Nodes\\\",\\n          \\\"egress\\\": [\\n            {\\n              \\\"cidr_blocks\\\": [\\n                \\\"0.0.0.0/0\\\"\\n              ],\\n              \\\"description\\\": \\\"\\\",\\n              \\\"from_port\\\": 0,\\n              \\\"ipv6_cidr_blocks\\\": [],\\n              \\\"prefix_list_ids\\\": [],\\n              \\\"protocol\\\": \\\"-1\\\",\\n              \\\"security_groups\\\": [],\\n              \\\"self\\\": false,\\n              \\\"to_port\\\": 0\\n            }\\n          ],\\n          \\\"ingress\\\": [\\n            {\\n              \\\"cidr_blocks\\\": [],\\n              \\\"description\\\": \\\"\\\",\\n              \\\"from_port\\\": 0,\\n              \\\"ipv6_cidr_blocks\\\": [],\\n              \\\"prefix_list_ids\\\": [],\\n              \\\"protocol\\\": \\\"-1\\\",\\n              \\\"security_groups\\\": [],\\n              \\\"self\\\": false,\\n              \\\"to_port\\\": 0\\n            }\\n          ],\\n          \\\"name\\\": \\\"divvy_all\\\",\\n          \\\"name_prefix\\\": null,\\n          \\\"revoke_rules_on_delete\\\": false,\\n          \\\"tags\\\": {\\n            \\\"Name\\\": \\\"allow_all\\\",\\n            \\\"foo\\\": \\\"bar\\\"\\n          },\\n          \\\"timeouts\\\": null,\\n          \\\"vpc_id\\\": \\\"vpc-424c723b\\\"\\n        },\\n        \\\"after_unknown\\\": {\\n          \\\"arn\\\": true,\\n          \\\"egress\\\": [\\n            {\\n              \\\"cidr_blocks\\\": [\\n                false\\n              ],\\n              \\\"ipv6_cidr_blocks\\\": [],\\n              \\\"prefix_list_ids\\\": [],\\n              \\\"security_groups\\\": []\\n            }\\n          ],\\n          \\\"id\\\": true,\\n          \\\"ingress\\\": [\\n            {\\n              \\\"cidr_blocks\\\": [],\\n              \\\"ipv6_cidr_blocks\\\": [],\\n              \\\"prefix_list_ids\\\": [],\\n              \\\"security_groups\\\": []\\n            }\\n          ],\\n          \\\"owner_id\\\": true,\\n          \\\"tags\\\": {}\\n        }\\n      }\\n    },\\n    {\\n      \\\"address\\\": \\\"aws_security_group.divvy_foo\\\",\\n      \\\"mode\\\": \\\"managed\\\",\\n      \\\"type\\\": \\\"aws_security_group\\\",\\n      \\\"name\\\": \\\"divvy_foo\\\",\\n      \\\"provider_name\\\": \\\"aws\\\",\\n      \\\"change\\\": {\\n        \\\"actions\\\": [\\n          \\\"create\\\"\\n        ],\\n        \\\"before\\\": null,\\n        \\\"after\\\": {\\n          \\\"description\\\": \\\"DivvyCloud Worker Nodes\\\",\\n          \\\"name\\\": \\\"divvy_all2\\\",\\n          \\\"name_prefix\\\": null,\\n          \\\"revoke_rules_on_delete\\\": false,\\n          \\\"tags\\\": null,\\n          \\\"timeouts\\\": null\\n        },\\n        \\\"after_unknown\\\": {\\n          \\\"arn\\\": true,\\n          \\\"egress\\\": true,\\n          \\\"id\\\": true,\\n          \\\"ingress\\\": true,\\n          \\\"owner_id\\\": true,\\n          \\\"vpc_id\\\": true\\n        }\\n      }\\n    },\\n    {\\n      \\\"address\\\": \\\"aws_security_group.no_rules\\\",\\n      \\\"mode\\\": \\\"managed\\\",\\n      \\\"type\\\": \\\"aws_security_group\\\",\\n      \\\"name\\\": \\\"no_rules\\\",\\n      \\\"provider_name\\\": \\\"aws\\\",\\n      \\\"change\\\": {\\n        \\\"actions\\\": [\\n          \\\"create\\\"\\n        ],\\n        \\\"before\\\": null,\\n        \\\"after\\\": {\\n          \\\"description\\\": \\\"Seriously, why would anybody do this.\\\",\\n          \\\"name\\\": \\\"no_rules\\\",\\n          \\\"name_prefix\\\": null,\\n          \\\"revoke_rules_on_delete\\\": false,\\n          \\\"tags\\\": {\\n            \\\"Environment\\\": \\\"dev\\\",\\n            \\\"Name\\\": \\\"test_no_rules\\\"\\n          },\\n          \\\"timeouts\\\": null\\n        },\\n        \\\"after_unknown\\\": {\\n          \\\"arn\\\": true,\\n          \\\"egress\\\": true,\\n          \\\"id\\\": true,\\n          \\\"ingress\\\": true,\\n          \\\"owner_id\\\": true,\\n          \\\"tags\\\": {},\\n          \\\"vpc_id\\\": true\\n        }\\n      }\\n    },\\n    {\\n      \\\"address\\\": \\\"aws_security_group_rule.allow_all_egress1\\\",\\n      \\\"mode\\\": \\\"managed\\\",\\n      \\\"type\\\": \\\"aws_security_group_rule\\\",\\n      \\\"name\\\": \\\"allow_all_egress1\\\",\\n      \\\"provider_name\\\": \\\"aws\\\",\\n      \\\"change\\\": {\\n        \\\"actions\\\": [\\n          \\\"create\\\"\\n        ],\\n        \\\"before\\\": null,\\n        \\\"after\\\": {\\n          \\\"cidr_blocks\\\": [\\n            \\\"0.0.0.0/0\\\"\\n          ],\\n          \\\"description\\\": null,\\n          \\\"from_port\\\": 0,\\n          \\\"ipv6_cidr_blocks\\\": null,\\n          \\\"prefix_list_ids\\\": null,\\n          \\\"protocol\\\": \\\"-1\\\",\\n          \\\"self\\\": false,\\n          \\\"to_port\\\": 0,\\n          \\\"type\\\": \\\"egress\\\"\\n        },\\n        \\\"after_unknown\\\": {\\n          \\\"cidr_blocks\\\": [\\n            false\\n          ],\\n          \\\"id\\\": true,\\n          \\\"security_group_id\\\": true,\\n          \\\"source_security_group_id\\\": true\\n        }\\n      }\\n    },\\n    {\\n      \\\"address\\\": \\\"aws_security_group_rule.allow_web_ingress_1\\\",\\n      \\\"mode\\\": \\\"managed\\\",\\n      \\\"type\\\": \\\"aws_security_group_rule\\\",\\n      \\\"name\\\": \\\"allow_web_ingress_1\\\",\\n      \\\"provider_name\\\": \\\"aws\\\",\\n      \\\"change\\\": {\\n        \\\"actions\\\": [\\n          \\\"create\\\"\\n        ],\\n        \\\"before\\\": null,\\n        \\\"after\\\": {\\n          \\\"cidr_blocks\\\": [\\n            \\\"0.0.0.0/0\\\"\\n          ],\\n          \\\"description\\\": null,\\n          \\\"from_port\\\": 80,\\n          \\\"ipv6_cidr_blocks\\\": null,\\n          \\\"prefix_list_ids\\\": null,\\n          \\\"protocol\\\": \\\"-1\\\",\\n          \\\"self\\\": false,\\n          \\\"to_port\\\": 80,\\n          \\\"type\\\": \\\"ingress\\\"\\n        },\\n        \\\"after_unknown\\\": {\\n          \\\"cidr_blocks\\\": [\\n            false\\n          ],\\n          \\\"id\\\": true,\\n          \\\"security_group_id\\\": true,\\n          \\\"source_security_group_id\\\": true\\n        }\\n      }\\n    },\\n    {\\n      \\\"address\\\": \\\"aws_security_group_rule.allow_web_ingress_2\\\",\\n      \\\"mode\\\": \\\"managed\\\",\\n      \\\"type\\\": \\\"aws_security_group_rule\\\",\\n      \\\"name\\\": \\\"allow_web_ingress_2\\\",\\n      \\\"provider_name\\\": \\\"aws\\\",\\n      \\\"change\\\": {\\n        \\\"actions\\\": [\\n          \\\"create\\\"\\n        ],\\n        \\\"before\\\": null,\\n        \\\"after\\\": {\\n          \\\"cidr_blocks\\\": [\\n            \\\"0.0.0.0/0\\\"\\n          ],\\n          \\\"description\\\": null,\\n          \\\"from_port\\\": 443,\\n          \\\"ipv6_cidr_blocks\\\": null,\\n          \\\"prefix_list_ids\\\": null,\\n          \\\"protocol\\\": \\\"-1\\\",\\n          \\\"self\\\": false,\\n          \\\"to_port\\\": 443,\\n          \\\"type\\\": \\\"ingress\\\"\\n        },\\n        \\\"after_unknown\\\": {\\n          \\\"cidr_blocks\\\": [\\n            false\\n          ],\\n          \\\"id\\\": true,\\n          \\\"security_group_id\\\": true,\\n          \\\"source_security_group_id\\\": true\\n        }\\n      }\\n    },\\n    {\\n      \\\"address\\\": \\\"aws_security_group_rule.allow_web_ingress_3\\\",\\n      \\\"mode\\\": \\\"managed\\\",\\n      \\\"type\\\": \\\"aws_security_group_rule\\\",\\n      \\\"name\\\": \\\"allow_web_ingress_3\\\",\\n      \\\"provider_name\\\": \\\"aws\\\",\\n      \\\"change\\\": {\\n        \\\"actions\\\": [\\n          \\\"create\\\"\\n        ],\\n        \\\"before\\\": null,\\n        \\\"after\\\": {\\n          \\\"cidr_blocks\\\": [\\n            \\\"0.0.0.0/0\\\"\\n          ],\\n          \\\"description\\\": null,\\n          \\\"from_port\\\": 8085,\\n          \\\"ipv6_cidr_blocks\\\": null,\\n          \\\"prefix_list_ids\\\": null,\\n          \\\"protocol\\\": \\\"-1\\\",\\n          \\\"self\\\": false,\\n          \\\"to_port\\\": 8007,\\n          \\\"type\\\": \\\"ingress\\\"\\n        },\\n        \\\"after_unknown\\\": {\\n          \\\"cidr_blocks\\\": [\\n            false\\n          ],\\n          \\\"id\\\": true,\\n          \\\"security_group_id\\\": true,\\n          \\\"source_security_group_id\\\": true\\n        }\\n      }\\n    },\\n    {\\n      \\\"address\\\": \\\"aws_vpc.divvy_vpc\\\",\\n      \\\"mode\\\": \\\"managed\\\",\\n      \\\"type\\\": \\\"aws_vpc\\\",\\n      \\\"name\\\": \\\"divvy_vpc\\\",\\n      \\\"provider_name\\\": \\\"aws\\\",\\n      \\\"change\\\": {\\n        \\\"actions\\\": [\\n          \\\"create\\\"\\n        ],\\n        \\\"before\\\": null,\\n        \\\"after\\\": {\\n          \\\"assign_generated_ipv6_cidr_block\\\": false,\\n          \\\"cidr_block\\\": \\\"10.0.0.0/16\\\",\\n          \\\"enable_dns_support\\\": true,\\n          \\\"instance_tenancy\\\": \\\"default\\\",\\n          \\\"tags\\\": null\\n        },\\n        \\\"after_unknown\\\": {\\n          \\\"arn\\\": true,\\n          \\\"default_network_acl_id\\\": true,\\n          \\\"default_route_table_id\\\": true,\\n          \\\"default_security_group_id\\\": true,\\n          \\\"dhcp_options_id\\\": true,\\n          \\\"enable_classiclink\\\": true,\\n          \\\"enable_classiclink_dns_support\\\": true,\\n          \\\"enable_dns_hostnames\\\": true,\\n          \\\"id\\\": true,\\n          \\\"ipv6_association_id\\\": true,\\n          \\\"ipv6_cidr_block\\\": true,\\n          \\\"main_route_table_id\\\": true,\\n          \\\"owner_id\\\": true\\n        }\\n      }\\n    }\\n  ],\\n  \\\"configuration\\\": {\\n    \\\"provider_config\\\": {\\n      \\\"aws\\\": {\\n        \\\"name\\\": \\\"aws\\\",\\n        \\\"expressions\\\": {\\n          \\\"region\\\": {\\n            \\\"constant_value\\\": \\\"us-west-2\\\"\\n          }\\n        }\\n      }\\n    },\\n    \\\"root_module\\\": {\\n      \\\"resources\\\": [\\n        {\\n          \\\"address\\\": \\\"aws_security_group.allow_web\\\",\\n          \\\"mode\\\": \\\"managed\\\",\\n          \\\"type\\\": \\\"aws_security_group\\\",\\n          \\\"name\\\": \\\"allow_web\\\",\\n          \\\"provider_config_key\\\": \\\"aws\\\",\\n          \\\"expressions\\\": {\\n            \\\"description\\\": {\\n              \\\"constant_value\\\": \\\"Allow web inbound traffic\\\"\\n            },\\n            \\\"name\\\": {\\n              \\\"constant_value\\\": \\\"allow_web\\\"\\n            },\\n            \\\"tags\\\": {\\n              \\\"constant_value\\\": {\\n                \\\"Name\\\": \\\"allow_all_web\\\"\\n              }\\n            },\\n            \\\"vpc_id\\\": {\\n              \\\"references\\\": [\\n                \\\"aws_vpc.divvy_vpc\\\"\\n              ]\\n            }\\n          },\\n          \\\"schema_version\\\": 1\\n        },\\n        {\\n          \\\"address\\\": \\\"aws_security_group.divvy_all\\\",\\n          \\\"mode\\\": \\\"managed\\\",\\n          \\\"type\\\": \\\"aws_security_group\\\",\\n          \\\"name\\\": \\\"divvy_all\\\",\\n          \\\"provider_config_key\\\": \\\"aws\\\",\\n          \\\"expressions\\\": {\\n            \\\"description\\\": {\\n              \\\"constant_value\\\": \\\"DivvyCloud Worker Nodes\\\"\\n            },\\n            \\\"name\\\": {\\n              \\\"constant_value\\\": \\\"divvy_all\\\"\\n            },\\n            \\\"tags\\\": {\\n              \\\"constant_value\\\": {\\n                \\\"Name\\\": \\\"allow_all\\\",\\n                \\\"foo\\\": \\\"bar\\\"\\n              }\\n            },\\n            \\\"vpc_id\\\": {\\n              \\\"references\\\": [\\n                \\\"data.aws_vpc.default\\\"\\n              ]\\n            }\\n          },\\n          \\\"schema_version\\\": 1\\n        },\\n        {\\n          \\\"address\\\": \\\"aws_security_group.divvy_foo\\\",\\n          \\\"mode\\\": \\\"managed\\\",\\n          \\\"type\\\": \\\"aws_security_group\\\",\\n          \\\"name\\\": \\\"divvy_foo\\\",\\n          \\\"provider_config_key\\\": \\\"aws\\\",\\n          \\\"expressions\\\": {\\n            \\\"description\\\": {\\n              \\\"constant_value\\\": \\\"DivvyCloud Worker Nodes\\\"\\n            },\\n            \\\"name\\\": {\\n              \\\"constant_value\\\": \\\"divvy_all2\\\"\\n            }\\n          },\\n          \\\"schema_version\\\": 1\\n        },\\n        {\\n          \\\"address\\\": \\\"aws_security_group.no_rules\\\",\\n          \\\"mode\\\": \\\"managed\\\",\\n          \\\"type\\\": \\\"aws_security_group\\\",\\n          \\\"name\\\": \\\"no_rules\\\",\\n          \\\"provider_config_key\\\": \\\"aws\\\",\\n          \\\"expressions\\\": {\\n            \\\"description\\\": {\\n              \\\"constant_value\\\": \\\"Seriously, why would anybody do this.\\\"\\n            },\\n            \\\"name\\\": {\\n              \\\"constant_value\\\": \\\"no_rules\\\"\\n            },\\n            \\\"tags\\\": {\\n              \\\"constant_value\\\": {\\n                \\\"Environment\\\": \\\"dev\\\",\\n                \\\"Name\\\": \\\"test_no_rules\\\"\\n              }\\n            }\\n          },\\n          \\\"schema_version\\\": 1\\n        },\\n        {\\n          \\\"address\\\": \\\"aws_security_group_rule.allow_all_egress1\\\",\\n          \\\"mode\\\": \\\"managed\\\",\\n          \\\"type\\\": \\\"aws_security_group_rule\\\",\\n          \\\"name\\\": \\\"allow_all_egress1\\\",\\n          \\\"provider_config_key\\\": \\\"aws\\\",\\n          \\\"expressions\\\": {\\n            \\\"cidr_blocks\\\": {\\n              \\\"constant_value\\\": [\\n                \\\"0.0.0.0/0\\\"\\n              ]\\n            },\\n            \\\"from_port\\\": {\\n              \\\"constant_value\\\": 0\\n            },\\n            \\\"protocol\\\": {\\n              \\\"constant_value\\\": \\\"-1\\\"\\n            },\\n            \\\"security_group_id\\\": {\\n              \\\"references\\\": [\\n                \\\"aws_security_group.divvy_foo\\\"\\n              ]\\n            },\\n            \\\"to_port\\\": {\\n              \\\"constant_value\\\": 0\\n            },\\n            \\\"type\\\": {\\n              \\\"constant_value\\\": \\\"egress\\\"\\n            }\\n          },\\n          \\\"schema_version\\\": 2\\n        },\\n        {\\n          \\\"address\\\": \\\"aws_security_group_rule.allow_web_ingress_1\\\",\\n          \\\"mode\\\": \\\"managed\\\",\\n          \\\"type\\\": \\\"aws_security_group_rule\\\",\\n          \\\"name\\\": \\\"allow_web_ingress_1\\\",\\n          \\\"provider_config_key\\\": \\\"aws\\\",\\n          \\\"expressions\\\": {\\n            \\\"cidr_blocks\\\": {\\n              \\\"constant_value\\\": [\\n                \\\"0.0.0.0/0\\\"\\n              ]\\n            },\\n            \\\"from_port\\\": {\\n              \\\"constant_value\\\": 80\\n            },\\n            \\\"protocol\\\": {\\n              \\\"constant_value\\\": \\\"-1\\\"\\n            },\\n            \\\"security_group_id\\\": {\\n              \\\"references\\\": [\\n                \\\"aws_security_group.divvy_foo\\\"\\n              ]\\n            },\\n            \\\"to_port\\\": {\\n              \\\"constant_value\\\": 80\\n            },\\n            \\\"type\\\": {\\n              \\\"constant_value\\\": \\\"ingress\\\"\\n            }\\n          },\\n          \\\"schema_version\\\": 2\\n        },\\n        {\\n          \\\"address\\\": \\\"aws_security_group_rule.allow_web_ingress_2\\\",\\n          \\\"mode\\\": \\\"managed\\\",\\n          \\\"type\\\": \\\"aws_security_group_rule\\\",\\n          \\\"name\\\": \\\"allow_web_ingress_2\\\",\\n          \\\"provider_config_key\\\": \\\"aws\\\",\\n          \\\"expressions\\\": {\\n            \\\"cidr_blocks\\\": {\\n              \\\"constant_value\\\": [\\n                \\\"0.0.0.0/0\\\"\\n              ]\\n            },\\n            \\\"from_port\\\": {\\n              \\\"constant_value\\\": 443\\n            },\\n            \\\"protocol\\\": {\\n              \\\"constant_value\\\": \\\"-1\\\"\\n            },\\n            \\\"security_group_id\\\": {\\n              \\\"references\\\": [\\n                \\\"aws_security_group.divvy_foo\\\"\\n              ]\\n            },\\n            \\\"to_port\\\": {\\n              \\\"constant_value\\\": 443\\n            },\\n            \\\"type\\\": {\\n              \\\"constant_value\\\": \\\"ingress\\\"\\n            }\\n          },\\n          \\\"schema_version\\\": 2\\n        },\\n        {\\n          \\\"address\\\": \\\"aws_security_group_rule.allow_web_ingress_3\\\",\\n          \\\"mode\\\": \\\"managed\\\",\\n          \\\"type\\\": \\\"aws_security_group_rule\\\",\\n          \\\"name\\\": \\\"allow_web_ingress_3\\\",\\n          \\\"provider_config_key\\\": \\\"aws\\\",\\n          \\\"expressions\\\": {\\n            \\\"cidr_blocks\\\": {\\n              \\\"constant_value\\\": [\\n                \\\"0.0.0.0/0\\\"\\n              ]\\n            },\\n            \\\"from_port\\\": {\\n              \\\"constant_value\\\": 8085\\n            },\\n            \\\"protocol\\\": {\\n              \\\"constant_value\\\": \\\"-1\\\"\\n            },\\n            \\\"security_group_id\\\": {\\n              \\\"references\\\": [\\n                \\\"aws_security_group.divvy_foo\\\"\\n              ]\\n            },\\n            \\\"to_port\\\": {\\n              \\\"constant_value\\\": 8007\\n            },\\n            \\\"type\\\": {\\n              \\\"constant_value\\\": \\\"ingress\\\"\\n            }\\n          },\\n          \\\"schema_version\\\": 2\\n        },\\n        {\\n          \\\"address\\\": \\\"aws_vpc.divvy_vpc\\\",\\n          \\\"mode\\\": \\\"managed\\\",\\n          \\\"type\\\": \\\"aws_vpc\\\",\\n          \\\"name\\\": \\\"divvy_vpc\\\",\\n          \\\"provider_config_key\\\": \\\"aws\\\",\\n          \\\"expressions\\\": {\\n            \\\"cidr_block\\\": {\\n              \\\"constant_value\\\": \\\"10.0.0.0/16\\\"\\n            }\\n          },\\n          \\\"schema_version\\\": 1\\n        },\\n        {\\n          \\\"address\\\": \\\"data.aws_vpc.default\\\",\\n          \\\"mode\\\": \\\"data\\\",\\n          \\\"type\\\": \\\"aws_vpc\\\",\\n          \\\"name\\\": \\\"default\\\",\\n          \\\"provider_config_key\\\": \\\"aws\\\",\\n          \\\"schema_version\\\": 0\\n        }\\n      ]\\n    }\\n  }\\n}\\n\",\"scan_type\":\"inline\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/v3/iac/scan?organization_id=307",
							"host": [
								"{{domain}}"
							],
							"path": [
								"v3",
								"iac",
								"scan"
							],
							"query": [
								{
									"key": "organization_id",
									"value": "307"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var user = pm.environment.get(\"user_name\");",
							"var jsonData = pm.response.json();",
							"pm.test(user + \" is authorized to run IAC Scans & response returns expected results\", function () {",
							"    pm.expect(jsonData.build_id).to.exist;",
							"    pm.expect(jsonData.message).to.contain(\"3 failed\");",
							"    pm.response.to.have.status(406);",
							"});",
							"//Baseline for attached plan has 1986ms response time",
							"pm.test(\"Response time is less than 2000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Insights",
			"item": [
				{
					"name": "List Insights",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var user = pm.environment.get(\"user_name\");",
									"var jsonData = pm.response.json();",
									"",
									"if (user === \"Basic-Disabled\"){",
									"    pm.test(user + \" cannot access Insights list\", function () {",
									"        pm.response.to.have.status(401);",
									"    });",
									"}",
									"else{ ",
									"    pm.test(user + \" can access Insights & Verify Insight- Compute Instances With Unencrypted Volumes\", function () {",
									"    pm.expect(jsonData[100].name).contains(\"Compute Instances With Unencrypted Volumes\")",
									"});",
									"",
									"pm.test(\"Lenght is greater than Backoffice insghts\", function () {",
									"    pm.expect(jsonData.length).to.greaterThan(514)",
									"});",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{divvy_username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{divvy_password}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Auth-Token",
								"value": "{{X-Auth-Token}}",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{domain}}/v2/public/insights/list",
							"host": [
								"{{domain}}"
							],
							"path": [
								"v2",
								"public",
								"insights",
								"list"
							]
						}
					},
					"response": [
						{
							"name": "List Insights",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"value": "{{X-Auth-Token}}"
									}
								],
								"url": {
									"raw": "{{domain}}/v2/public/insights/list/1/3",
									"host": [
										"{{domain}}"
									],
									"path": [
										"v2",
										"public",
										"insights",
										"list",
										"1",
										"3"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "access-control-allow-headers",
									"value": "Origin, X-Requested-With, Content-Type, Accept",
									"name": "access-control-allow-headers",
									"description": ""
								},
								{
									"key": "access-control-allow-methods",
									"value": "POST, GET, OPTIONS",
									"name": "access-control-allow-methods",
									"description": ""
								},
								{
									"key": "access-control-allow-origin",
									"value": "*",
									"name": "access-control-allow-origin",
									"description": ""
								},
								{
									"key": "cache-control",
									"value": "private, no-cache, no-store, no-transform, must-revalidate, max-age=0",
									"name": "cache-control",
									"description": ""
								},
								{
									"key": "content-encoding",
									"value": "gzip",
									"name": "content-encoding",
									"description": ""
								},
								{
									"key": "content-length",
									"value": "435",
									"name": "content-length",
									"description": ""
								},
								{
									"key": "content-type",
									"value": "application/json",
									"name": "content-type",
									"description": ""
								},
								{
									"key": "date",
									"value": "Wed, 25 Oct 2017 14:43:51 GMT",
									"name": "date",
									"description": ""
								},
								{
									"key": "last-modified",
									"value": "2017-10-25 10:43:51.190940",
									"name": "last-modified",
									"description": ""
								},
								{
									"key": "server",
									"value": "waitress",
									"name": "server",
									"description": ""
								},
								{
									"key": "vary",
									"value": "Accept-Encoding",
									"name": "vary",
									"description": ""
								}
							],
							"cookie": [],
							"body": "[{\"scopes\": [], \"timeseries\": true, \"tags\": [\"best practices\", \"high availability\"], \"severity\": 1, \"timeseries_cache\": 0, \"organization_id\": 1, \"filters\": [{\"config\": {}, \"name\": \"divvy.filter.database_instance_multi_az\"}], \"owner_resource_id\": null, \"resource_types\": [\"dbinstance\"], \"name\": \"Database Instance Not Multi-AZ\", \"insight_id\": 2, \"description\": \"Identify databases that are not configured across multiple availablity zones for resiliency\", \"template_id\": 2}, {\"scopes\": [], \"timeseries\": true, \"tags\": [\"pci\", \"best practices\", \"security\", \"cis controls\", \"hipaa\"], \"severity\": 4, \"timeseries_cache\": 0, \"organization_id\": 1, \"filters\": [{\"config\": {\"ignore_disabled\": false}, \"name\": \"divvy.filter.cloud_with_no_service_users\"}], \"owner_resource_id\": null, \"resource_types\": [\"divvyorganizationservice\"], \"name\": \"Cloud Account Without Service Users\", \"insight_id\": 3, \"description\": \"Identify accounts without any active user accounts.\", \"template_id\": 13}]"
						}
					]
				},
				{
					"name": "Create Insight",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var user = pm.environment.get(\"user_name\");",
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"insight_delete\", jsonData.insight_id);",
									"",
									"if (user === \"Basic-Disabled\" || user === \"Basic-Viewer\" | user === \"APITestingAdmin-RO\"){",
									"    pm.test(user + \" cannot create Insights\", function () {",
									"        pm.environment.set(\"insight_delete\", 3815);",
									"        pm.response.to.have.status(401);",
									"    });",
									"}",
									"else{ ",
									"    pm.test(user + \" can create Insights\", function () {",
									"        pm.expect(jsonData.insight_id).exist;",
									"        pm.environment.set(\"insight_delete\", jsonData.insight_id);",
									"        pm.expect(jsonData.tags).contains(\"Automation\");",
									"        pm.expect(jsonData.organization_id).equal(315);",
									"    });",
									"",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "\"{{divvy_password}}\"",
									"type": "string"
								},
								{
									"key": "username",
									"value": "\"{{divvy_username}}\"",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Auth-Token",
								"value": "{{X-Auth-Token}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Api Automation test- All resource insight - {{$randomInt}}\",\n    \"description\": \"Test\",\n    \"resource_types\": [\n        \"resourceaccesslistrule\",\n        \"datalakestorage\",\n        \"networkendpoint\",\n        \"dataanalyticsworkspace\",\n        \"dbcluster\",\n        \"servicegroup\",\n        \"snapshot\",\n        \"domainuser\",\n        \"buildproject\",\n        \"dbproxy\",\n        \"userpool\",\n        \"diagnosticsetting\",\n        \"forwardingrule\",\n        \"serverlessfunction\",\n        \"logicapp\",\n        \"nsxrouteconfiguration\",\n        \"containerinstance\",\n        \"containerregistry\",\n        \"instancereservation\",\n        \"restapidomain\",\n        \"backendservice\",\n        \"nsxapplicationprofile\",\n        \"containercluster\",\n        \"servicecheck\",\n        \"serviceregion\",\n        \"database\",\n        \"servicealarm\",\n        \"resourcegroup\",\n        \"eventsubscription\",\n        \"natgateway\",\n        \"domaingroup\",\n        \"nsxpoolmember\",\n        \"resourceaccesslist\",\n        \"transcodingpipeline\",\n        \"bigdatasnapshot\",\n        \"nsxdistributedfirewall\",\n        \"datafactory\",\n        \"virtualprivategateway\",\n        \"networkendpointservice\",\n        \"nsxedgefirewall\",\n        \"divvyorganizationservice\",\n        \"route\",\n        \"networkaddressgroup\",\n        \"networkfirewallrulelist\",\n        \"serviceeventbus\",\n        \"containerdeployment\",\n        \"autoscalinggroup\",\n        \"accesslistflowlog\",\n        \"servicerole\",\n        \"containerimage\",\n        \"loadbalancer\",\n        \"etlsecurityconfig\",\n        \"networkpeer\",\n        \"podsecuritypolicy\",\n        \"mlinstance\",\n        \"pod\",\n        \"serviceeventrule\",\n        \"serviceuser\",\n        \"fileshare\",\n        \"sharedgallery\",\n        \"cloudwatchdestination\",\n        \"databricksworkspace\",\n        \"dbsnapshot\",\n        \"datastream\",\n        \"bigdatainstance\",\n        \"awsconfig\",\n        \"mcsnapshot\",\n        \"videostream\",\n        \"distributedtablecluster\",\n        \"distributedtable\",\n        \"servicecertificate\",\n        \"restapistage\",\n        \"serviceaccesskey\",\n        \"networkflowlog\",\n        \"webappgroup\",\n        \"routetable\",\n        \"coldstorage\",\n        \"hypervisor\",\n        \"querylogconfig\",\n        \"notificationsubscription\",\n        \"storagecontainer\",\n        \"nsxservicemonitor\",\n        \"kubernetesingress\",\n        \"securefiletransfer\",\n        \"trafficmirrortarget\",\n        \"container\",\n        \"threatfinding\",\n        \"streaminstance\",\n        \"apiaccountingconfig\",\n        \"servicecost\",\n        \"searchcluster\",\n        \"serviceencryptionkey\",\n        \"webapp\",\n        \"brokerinstance\",\n        \"networkfirewallrule\",\n        \"backupvault\",\n        \"servicedetector\",\n        \"sharedgalleryimageversion\",\n        \"mcinstance\",\n        \"restapi\",\n        \"datasynctask\",\n        \"notificationtopic\",\n        \"dbinstance\",\n        \"directconnect\",\n        \"secret\",\n        \"sitetositevpn\",\n        \"loganalyticsworkspace\",\n        \"kubernetesnamespace\",\n        \"lightsail\",\n        \"appserver\",\n        \"networkfirewall\",\n        \"nsxloadbalancerglobalconfig\",\n        \"dnszone\",\n        \"waf\",\n        \"etldatacatalog\",\n        \"serviceaccesspoint\",\n        \"servicedataset\",\n        \"bigdataworkspace\",\n        \"networkinterface\",\n        \"autoscalinglaunchconfiguration\",\n        \"sharedgalleryimage\",\n        \"spannerdatabase\",\n        \"directoryservice\",\n        \"spanner\",\n        \"nsxcomponent\",\n        \"nsxvirtualserver\",\n        \"internetgateway\",\n        \"servicelimit\",\n        \"privateimage\",\n        \"workspace\",\n        \"deliverystream\",\n        \"storedparameter\",\n        \"mapreducecluster\",\n        \"esinstance\",\n        \"stacktemplate\",\n        \"transitgateway\",\n        \"storageaccount\",\n        \"kubernetesservice\",\n        \"nsxedgeinterface\",\n        \"servicepolicy\",\n        \"datastore\",\n        \"targetproxy\",\n        \"serverlessapplication\",\n        \"emailservicedomain\",\n        \"nsxappliance\",\n        \"nsxstaticroute\",\n        \"serviceencryptionkeyvault\",\n        \"sshkeypair\",\n        \"publicip\",\n        \"serviceapp\",\n        \"privatenetwork\",\n        \"nsxedge\",\n        \"dbmigrationinstance\",\n        \"serviceoutpost\",\n        \"ddosprotection\",\n        \"messagequeue\",\n        \"restapikey\",\n        \"contentdeliverynetwork\",\n        \"searchindex\",\n        \"identityprovider\",\n        \"instance\",\n        \"airflowenvironment\",\n        \"nsxnatrule\",\n        \"volume\",\n        \"privatesubnet\",\n        \"servicedomain\",\n        \"accessanalyzer\",\n        \"servicecontrolpolicy\",\n        \"serviceloggroup\",\n        \"sharedfilesystem\",\n        \"nsxpool\"\n    ],\n    \"tags\": [\n        \"Automation\",\n        \"gdpr\"\n    ],\n    \"filters\": [\n        {\n            \"name\": \"divvy.query.resource_age_exceeds\",\n            \"config\": {\n                \"days\": 100\n            },\n            \"collections\": {}\n        }\n    ],\n    \"scopes\": [],\n    \"severity\": 1,\n    \"owner_resource_id\": null,\n    \"template_id\": null,\n    \"badges\": null,\n    \"badge_filter_operator\": null\n}"
						},
						"url": {
							"raw": "{{domain}}/v2/public/insights/create",
							"host": [
								"{{domain}}"
							],
							"path": [
								"v2",
								"public",
								"insights",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Insight",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var user = pm.environment.get(\"user_name\");",
									"",
									"if (user === \"API-OrgAdmin\" || user === \"APITestingAdmin\" || user === \"Basic-Admin\")",
									"{",
									"    pm.test(user + \" can delete Insight\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"}",
									"else",
									"{",
									"     pm.test(user + \" cannot delete insight\", function () {",
									"    //check for response for non authorized users",
									"        var jsonData = pm.response.json();",
									"        pm.response.to.have.status(401);",
									"        pm.expect(jsonData.error_message).contain(\"You do not have sufficient permissions to execute this operation\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "\"{{divvy_password}}\"",
									"type": "string"
								},
								{
									"key": "username",
									"value": "\"{{divvy_username}}\"",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Auth-Token",
								"value": "{{X-Auth-Token}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{domain}}/v2/public/insights/{{insight_delete}}/delete",
							"host": [
								"{{domain}}"
							],
							"path": [
								"v2",
								"public",
								"insights",
								"{{insight_delete}}",
								"delete"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Botfactory",
			"item": [
				{
					"name": "Create bot",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var user = pm.environment.get(\"user_name\");",
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"bot_id\", jsonData.resource_id);",
									"",
									"if (user === \"Basic-Disabled\" || user === \"APITestingAdmin-RO\" || user === \"Basic-Viewer\"){",
									"   pm.test(user + \" cannot create a Bot\", function () {",
									"        pm.response.to.have.status(401);",
									"    });",
									"",
									"}",
									"else{",
									"    pm.test(user + \" can create a Bot & response containes owner_name and bot_id\", function() {",
									"      pm.expect(pm.response.code).to.be.oneOf([200]);",
									"      pm.expect(jsonData.owner_name).to.contain(user);",
									"      pm.expect(jsonData.resource_id).to.contain(\"divvybot:\");",
									"});",
									"}    ",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{divvy_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{divvy_username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Auth-Token",
								"value": "{{X-Auth-Token}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"name\": \"Bot via API Regression test {{$randomInt}}\",\n \"description\": \"Demo for API documentation\",\n \"severity\": \"low\",\n \"category\": \"Security\",\n \"ondemand_enabled\": true,\n \"state\": \"PAUSED\",\n \"instructions\": {\n  \"resource_types\": [\n   \"instance\"\n  ],\n  \"groups\": [],\n  \"filters\": [\n   {\n    \"config\": {\n     \"cores\": 2\n    },\n    \"name\": \"divvy.filter.instance_cores_exceeds_threshold\"\n   }\n  ],\n  \"schedule\": null,\n  \"schedule_description\": null,\n  \"badges\": [\n   {\n    \"value\": \"wheat\",\n    \"key\": \"grain\"\n   }\n  ],\n  \"ondemand_enabled\": true,\n  \"hookpoints\": [],\n  \"actions\": [\n   {\n    \"run_when_result_is\": true,\n    \"config\": {\n     \"hours\": 0\n    },\n    \"name\": \"divvy.action.scheduled_stop\"\n   }\n  ]\n }\n}"
						},
						"url": {
							"raw": "{{domain}}/v2/public/botfactory/bot/create",
							"host": [
								"{{domain}}"
							],
							"path": [
								"v2",
								"public",
								"botfactory",
								"bot",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Archive Bot",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var user = pm.environment.get(\"user_name\");",
									"var jsonData = pm.response.json();",
									"",
									"if (user === \"Basic-Disabled\" || user === \"APITestingAdmin-RO\" || user === \"Basic-Viewer\" || user === \"Basic-Editor\"){",
									"   pm.test(user + \" cannot archive a Bot\", function () {",
									"        pm.response.to.have.status(401);",
									"    });",
									"}",
									"else{",
									"    pm.test(user + \" can archive a bot & response contains state:Archived\", function() {",
									"      pm.expect(pm.response.code).to.be.oneOf([200]);",
									"      pm.expect(jsonData.state).to.contain(\"ARCHIVED\");",
									"      pm.expect(jsonData.resource_id).to.contain(\"divvybot:\");",
									"});",
									"}    ",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "\"{{divvy_username}}\"",
									"type": "string"
								},
								{
									"key": "password",
									"value": "\"{{divvy_password}}\"",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Auth-Token",
								"value": "89c76fcded7e4ff89e58fbf521310bf9",
								"disabled": true
							},
							{
								"key": "Cookie",
								"value": "session_id=e1139967620b44bcae2ebcdb69847565; session_timeout=60"
							}
						],
						"url": {
							"raw": "{{domain}}/v2/public/botfactory/{{bot_id}}/archive",
							"host": [
								"{{domain}}"
							],
							"path": [
								"v2",
								"public",
								"botfactory",
								"{{bot_id}}",
								"archive"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Compliance Pack",
			"item": [
				{
					"name": "List Compliance Scorecard Email Subscriptions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var user = pm.environment.get(\"user_name\");",
									"if (user === \"API-OrgAdmin\" || user === \"APITestingAdmin\"){",
									"   pm.test(user+\" can list subscriptions\", function () {",
									"        pm.response.to.have.status(200);",
									"        pm.expect(pm.response.text()).to.include(\"Api Automation-Test On demand\");",
									"    });",
									"}",
									"else{ ",
									"     pm.test(user + \" cannot list subscriptions\", function () {",
									"        pm.response.to.have.status(401);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "\"{{divvy_password}}\"",
									"type": "string"
								},
								{
									"key": "username",
									"value": "\"{{divvy_username}}\"",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{X-Auth-Token}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{domain}}/v2/subscriptions/",
							"host": [
								"{{domain}}"
							],
							"path": [
								"v2",
								"subscriptions",
								""
							]
						}
					},
					"response": [
						{
							"name": "List  Scorecard Email Subscriptions   ",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Auth-Token",
										"value": "{{X-Auth-Token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{domain}}/v2/subscriptions/",
									"host": [
										"{{domain}}"
									],
									"path": [
										"v2",
										"subscriptions",
										""
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"scorecard\": [\n        {\n            \"name\": \"Divvycloud\",\n            \"hour\": 12,\n            \"schedule\": \"daily\",\n            \"export_name\": \"Divvycloud export\",\n            \"day_of_week\": null,\n            \"organization_id\": 1,\n            \"email_sub_title\": \"Email Subtitle!\",\n            \"export_id\": 1,\n            \"id\": 3,\n            \"email_addresses\": [\n                \"user@divvycloud.com\"\n            ]\n        },\n        {\n            \"name\": \"Hello from DivvyCloud\",\n            \"hour\": 0,\n            \"schedule\": \"daily\",\n            \"export_name\": \"Test export\",\n            \"day_of_week\": null,\n            \"organization_id\": 1,\n            \"email_sub_title\": \"Subtile\",\n            \"export_id\": 2,\n            \"id\": 4,\n            \"email_addresses\": [\n                \"user@DivvyCloud.com\"\n            ]\n        },\n        {\n            \"name\": \"Divvycloud\",\n            \"hour\": 12,\n            \"schedule\": \"daily\",\n            \"export_name\": \"Divvycloud export\",\n            \"day_of_week\": null,\n            \"organization_id\": 1,\n            \"email_sub_title\": \"Email Subtitle!\",\n            \"export_id\": 1,\n            \"id\": 5,\n            \"email_addresses\": [\n                \"user@divvycloud.com\"\n            ]\n        },\n        {\n            \"name\": \"Divvycloud\",\n            \"hour\": 12,\n            \"schedule\": \"daily\",\n            \"export_name\": \"Divvycloud export\",\n            \"day_of_week\": null,\n            \"organization_id\": 1,\n            \"email_sub_title\": \"Email Subtitle!\",\n            \"export_id\": 1,\n            \"id\": 6,\n            \"email_addresses\": [\n                \"user@divvycloud.com\"\n            ]\n        },\n        {\n            \"name\": \"CIS - AWS\",\n            \"hour\": 0,\n            \"schedule\": \"daily\",\n            \"export_name\": \"CIS - AWS export\",\n            \"day_of_week\": null,\n            \"organization_id\": 1,\n            \"email_sub_title\": \"Subtile\",\n            \"export_id\": 3,\n            \"id\": 7,\n            \"email_addresses\": [\n                \"test@test.com\"\n            ]\n        },\n        {\n            \"name\": \"PCI DSS\",\n            \"hour\": 12,\n            \"schedule\": \"daily\",\n            \"export_name\": \"Another test export\",\n            \"day_of_week\": null,\n            \"organization_id\": 1,\n            \"email_sub_title\": \"PCI DSS\",\n            \"export_id\": 2,\n            \"id\": 8,\n            \"email_addresses\": [\n                \"user@divvycloud.com\"\n            ]\n        }\n    ],\n    \"pack\": [\n        {\n            \"badge_filter_operator\": \"OR\",\n            \"name\": \"Scott\",\n            \"hour\": 0,\n            \"schedule\": \"weekly\",\n            \"pack_id\": 1,\n            \"pack_type\": \"backoffice\",\n            \"day_of_week\": \"friday\",\n            \"organization_id\": 1,\n            \"email_addresses\": [\n                \"user@divvycloud.com\"\n            ],\n            \"email_sub_title\": null,\n            \"id\": 1,\n            \"badges\": [\n                {\n                    \"value\": \"amazon web services\",\n                    \"key\": \"divvy.cloud_type\"\n                }\n            ]\n        },\n        {\n            \"badge_filter_operator\": null,\n            \"name\": \"apitest\",\n            \"hour\": 0,\n            \"schedule\": \"daily\",\n            \"pack_id\": 2,\n            \"pack_type\": \"backoffice\",\n            \"day_of_week\": null,\n            \"organization_id\": 1,\n            \"email_addresses\": [\n                \"scott.longhofer@divvycloud.com\"\n            ],\n            \"email_sub_title\": null,\n            \"id\": 2,\n            \"badges\": []\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Send On Demand Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var user = pm.environment.get(\"user_name\");",
									"if (user === \"API-OrgAdmin\" || user === \"APITestingAdmin\"){",
									"   pm.test(user+\" can trigger a ondemand export for compliance pack\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"}",
									"else{ ",
									"     pm.test(user + \" cannot trigger an ondemand compliance pack\", function () {",
									"        pm.response.to.have.status(401);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Auth-Token",
								"value": "{{X-Auth-Token}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"subscription_ids\":[248]}\n"
						},
						"url": {
							"raw": "{{domain}}/v2/subscriptions/ondemand",
							"host": [
								"{{domain}}"
							],
							"path": [
								"v2",
								"subscriptions",
								"ondemand"
							]
						}
					},
					"response": []
				},
				{
					"name": "Download Featured Pack Compliance Scorecard",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var user = pm.environment.get(\"user_name\");",
									"var response_headers =  pm.response.headers.all();",
									"console.log(response_headers)",
									"",
									"if (user === \"Basic-Disabled\"){",
									"    pm.test(user + \" without any cloud scope cannot download scorecard\", function () {",
									"        pm.response.to.have.status(500);",
									"    });",
									"}",
									"else{ ",
									"    pm.test(user + \" can download scorecard and expected data is returned\", function () {",
									"    pm.expect(response_headers[7].value).contains(\"APITesting_NISTCyberSecurityFramework(CSF)\");",
									"    pm.expect(response_headers[1].value).contains(\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\");",
									"});",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "\"{{divvy_password}}\"",
									"type": "string"
								},
								{
									"key": "username",
									"value": "\"{{divvy_username}}\"",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{X-Auth-Token}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"organization_service_filters\": {\n        \"organization_service_ids\": [],\n        \"cloud_types\": [\n            \"AWS\"\n        ],\n        \"badges\": []\n    },\n    \"insight_filters\": {\n        \"severity\": [],\n        \"insight_ids\": [],\n        \"resource_types\": []\n    }\n}"
						},
						"url": {
							"raw": "{{domain}}/v2/compliance/score-card/export?pack_ids=backoffice:6",
							"host": [
								"{{domain}}"
							],
							"path": [
								"v2",
								"compliance",
								"score-card",
								"export"
							],
							"query": [
								{
									"key": "pack_ids",
									"value": "backoffice:6",
									"description": "Backoffice/custom:number of pack ID"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "basic",
				"basic": [
					{
						"key": "username",
						"value": "{{divvy_username}}",
						"type": "string"
					},
					{
						"key": "password",
						"value": "{{divvy_password}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "IAM/Access Explorer",
			"item": [
				{
					"name": "IAM Explorer",
					"item": [
						{
							"name": "Principals",
							"item": [
								{
									"name": "Subjects - Type: Principals",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true,
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"columns\": [],\n    \"filters\": [],\n    \"application_group_id\": 2,\n    \"access_level\": \"HAS_ACCESS\",\n    \"expected_type\": \"USER\",\n    \"page\": 1,\n    \"page_size\": 50,\n    \"sort\": {\n        \"key\": \"name\",\n        \"direction\": \"ASC\"\n    }\n}"
										},
										"url": {
											"raw": "{{domain}}/v3/iam/iam-explorer/subjects",
											"host": [
												"{{domain}}"
											],
											"path": [
												"v3",
												"iam",
												"iam-explorer",
												"subjects"
											]
										}
									},
									"response": []
								},
								{
									"name": "Subjects - Type: Principals - Search: Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true,
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"columns\": [],\n    \"filters\": [\n        {\n            \"key\": \"name\",\n            \"value\": [\n                \"AD1-Server-Role\"\n            ]\n        }\n    ],\n    \"application_group_id\": 44,\n    \"access_level\": \"HAS_ACCESS\",\n    \"expected_type\": \"USER\",\n    \"page\": 1,\n    \"page_size\": 20,\n    \"sort\": {\n        \"key\": \"name\",\n        \"direction\": \"ASC\"\n    }\n}"
										},
										"url": {
											"raw": "{{domain}}/v3/iam/iam-explorer/subjects",
											"host": [
												"{{domain}}"
											],
											"path": [
												"v3",
												"iam",
												"iam-explorer",
												"subjects"
											]
										}
									},
									"response": []
								},
								{
									"name": "Subjects - Type: Principals - Search: AccountID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true,
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"columns\": [],\n    \"filters\": [\n        {\n            \"key\": \"cloud_id\",\n            \"value\": [\n                \"050283019178\"\n            ]\n        }\n    ],\n    \"application_group_id\": 44,\n    \"access_level\": \"HAS_ACCESS\",\n    \"expected_type\": \"USER\",\n    \"page\": 1,\n    \"page_size\": 20,\n    \"sort\": {\n        \"key\": \"name\",\n        \"direction\": \"ASC\"\n    }\n}"
										},
										"url": {
											"raw": "{{domain}}/v3/iam/iam-explorer/subjects",
											"host": [
												"{{domain}}"
											],
											"path": [
												"v3",
												"iam",
												"iam-explorer",
												"subjects"
											]
										}
									},
									"response": []
								},
								{
									"name": "Subjects - Type: Principals - Search: AccountName",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true,
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"columns\": [],\n    \"filters\": [\n        {\n            \"key\": \"cloud_name\",\n            \"value\": [\n                \"AWS-IAR\"\n            ]\n        }\n    ],\n    \"application_group_id\": 44,\n    \"access_level\": \"HAS_ACCESS\",\n    \"expected_type\": \"USER\",\n    \"page\": 1,\n    \"page_size\": 20,\n    \"sort\": {\n        \"key\": \"name\",\n        \"direction\": \"ASC\"\n    }\n}"
										},
										"url": {
											"raw": "{{domain}}/v3/iam/iam-explorer/subjects",
											"host": [
												"{{domain}}"
											],
											"path": [
												"v3",
												"iam",
												"iam-explorer",
												"subjects"
											]
										}
									},
									"response": []
								},
								{
									"name": "Subjects - Type: Principals - Search: Type: IAM Role",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true,
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"columns\": [],\n    \"filters\": [\n        {\n            \"key\": \"resource_type\",\n            \"value\": [\n                \"IAM Role\"\n            ]\n        }\n    ],\n    \"application_group_id\": 44,\n    \"access_level\": \"HAS_ACCESS\",\n    \"expected_type\": \"USER\",\n    \"page\": 1,\n    \"page_size\": 20,\n    \"sort\": {\n        \"key\": \"name\",\n        \"direction\": \"ASC\"\n    }\n}\n"
										},
										"url": {
											"raw": "{{domain}}/v3/iam/iam-explorer/subjects",
											"host": [
												"{{domain}}"
											],
											"path": [
												"v3",
												"iam",
												"iam-explorer",
												"subjects"
											]
										}
									},
									"response": []
								},
								{
									"name": "Subjects - Type: Principals - Tag Columns",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true,
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"columns\": [\n        \"tag.leading space\",\n        \"tag.AmazonMWAAManaged\"\n    ],\n    \"filters\": [],\n    \"application_group_id\": 44,\n    \"access_level\": \"HAS_ACCESS\",\n    \"expected_type\": \"USER\",\n    \"page\": 1,\n    \"page_size\": 100,\n    \"sort\": {\n        \"key\": \"name\",\n        \"direction\": \"ASC\"\n    }\n}"
										},
										"url": {
											"raw": "{{domain}}/v3/iam/iam-explorer/subjects",
											"host": [
												"{{domain}}"
											],
											"path": [
												"v3",
												"iam",
												"iam-explorer",
												"subjects"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var user = pm.environment.get(\"user_name\");",
											"if (user === \"Basic-Disabled\")",
											"{",
											"  pm.test(user + \" cannot access Access Explorer; Status code is 401\", function () {",
											"        pm.response.to.have.status(401);",
											"    });",
											"",
											"}",
											"else {",
											"// Get jason body",
											"var jsonData = pm.response.json();",
											"",
											"// Asserts to check on jason Body",
											"var nameValueCheck = \"AD1-Server-Role\";",
											"var resourceTypeCheck =\"IAM Role\";",
											"var typeCheck = \"USER\";",
											"var cloudTypeCheck= \"AWS\";",
											"var cloudIdCheck = \"050283019178\";",
											"var arnCheck = \"arn:aws:iam::050283019178:role\\/AD1-Server-Role\";",
											"",
											"// Tests",
											"pm.test(\"IAM Principals Global Test: Testing Response Body Values\", function() ",
											"{",
											"    pm.expect(jsonData.data.subjects[0].name).to.eql(nameValueCheck);",
											"    pm.expect(jsonData.data.subjects[0].resource_type).to.eq(resourceTypeCheck);",
											"    pm.expect(jsonData.data.subjects[0].type).to.eq(typeCheck);",
											"    pm.expect(jsonData.data.subjects[0].cloud_type).to.eq(cloudTypeCheck);",
											"    pm.expect(jsonData.data.subjects[0].cloud_id).to.eq(cloudIdCheck);",
											"    pm.expect(jsonData.data.subjects[0].ARN).to.eq(arnCheck);",
											"    ",
											"});",
											"}",
											"",
											"",
											"",
											""
										]
									}
								}
							]
						},
						{
							"name": "Principals - Other Tests",
							"item": [
								{
									"name": "Subjects - Type: Principals - Search: Type: IAM User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var user = pm.environment.get(\"user_name\");",
													"if (user === \"Basic-Disabled\")",
													"{",
													"  pm.test(user + \" cannot access Access Explorer; Status code is 401\", function () {",
													"        pm.response.to.have.status(401);",
													"    });",
													"",
													"}",
													"else {",
													"    // Get jason body",
													"var jsonData = pm.response.json();",
													"",
													"// Asserts to check on jason Body",
													"var nameValueCheck = \"bob.walsh\";",
													"var resourceTypeCheck =\"IAM User\";",
													"var typeCheck = \"USER\";",
													"var cloudTypeCheck= \"AWS\";",
													"var cloudIdCheck = \"050283019178\";",
													"var arnCheck = \"arn:aws:iam::050283019178:user\\/bob.walsh\";",
													"",
													"// Tests",
													"pm.test(\"IAM Principals Global Test: Testing Response Body Values\", function() ",
													"{",
													"    pm.expect(jsonData.data.subjects[0].name).to.eql(nameValueCheck);",
													"    pm.expect(jsonData.data.subjects[0].resource_type).to.eq(resourceTypeCheck);",
													"    pm.expect(jsonData.data.subjects[0].type).to.eq(typeCheck);",
													"    pm.expect(jsonData.data.subjects[0].cloud_type).to.eq(cloudTypeCheck);",
													"    pm.expect(jsonData.data.subjects[0].cloud_id).to.eq(cloudIdCheck);",
													"    pm.expect(jsonData.data.subjects[0].ARN).to.eq(arnCheck);",
													"    ",
													"});",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true,
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"columns\": [],\n    \"filters\": [\n        {\n            \"key\": \"resource_type\",\n            \"value\": [\n                \"IAM User\"\n            ]\n        }\n    ],\n    \"application_group_id\": 44,\n    \"access_level\": \"HAS_ACCESS\",\n    \"expected_type\": \"USER\",\n    \"page\": 1,\n    \"page_size\": 20,\n    \"sort\": {\n        \"key\": \"name\",\n        \"direction\": \"ASC\"\n    }\n}\n"
										},
										"url": {
											"raw": "{{domain}}/v3/iam/iam-explorer/subjects",
											"host": [
												"{{domain}}"
											],
											"path": [
												"v3",
												"iam",
												"iam-explorer",
												"subjects"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Resources",
							"item": [
								{
									"name": "Subjects - Type: Resources - Search: Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true,
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"columns\": [\n        \"tag.leading space\"\n    ],\n    \"filters\": [\n        {\n            \"key\": \"name\",\n            \"value\": [\n                \"$default\"\n            ]\n        }\n    ],\n    \"application_group_id\": 44,\n    \"access_level\": \"HAS_ACCESS\",\n    \"expected_type\": \"RESOURCE\",\n    \"page\": 1,\n    \"page_size\": 100,\n    \"sort\": {\n        \"key\": \"name\",\n        \"direction\": \"ASC\"\n    }\n}"
										},
										"url": {
											"raw": "{{domain}}/v3/iam/iam-explorer/subjects",
											"host": [
												"{{domain}}"
											],
											"path": [
												"v3",
												"iam",
												"iam-explorer",
												"subjects"
											]
										}
									},
									"response": []
								},
								{
									"name": "Subjects - Type: Resources - Search: ARN Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true,
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"columns\": [],\n    \"filters\": [\n        {\n            \"key\": \"ARN\",\n            \"value\": [\n                \"arn:aws:apigateway:us-east-1::/restapis/98pa042ec9/stages/$default\"\n            ]\n        }\n    ],\n    \"application_group_id\": 44,\n    \"access_level\": \"HAS_ACCESS\",\n    \"expected_type\": \"RESOURCE\",\n    \"page\": 1,\n    \"page_size\": 20,\n    \"sort\": {\n        \"key\": \"name\",\n        \"direction\": \"ASC\"\n    }\n}"
										},
										"url": {
											"raw": "{{domain}}/v3/iam/iam-explorer/subjects",
											"host": [
												"{{domain}}"
											],
											"path": [
												"v3",
												"iam",
												"iam-explorer",
												"subjects"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var user = pm.environment.get(\"user_name\");",
											"if (user === \"Basic-Disabled\")",
											"{",
											"  pm.test(user + \" cannot access Access Explorer; Status code is 401\", function () {",
											"        pm.response.to.have.status(401);",
											"    });",
											"",
											"}",
											"else ",
											"{",
											"  // Get jason body",
											"  var jsonData = pm.response.json();",
											"",
											"  // Asserts to check on jason Body",
											"  var nameValueCheck = \"$default\";",
											"  var resourceTypeCheck1 = \"API Gateway Stage\";",
											"  var typeCheck = \"RESOURCE\";",
											"  var cloudTypeCheck= \"AWS\";",
											"  var cloudIdCheck = \"050283019178\";",
											"  var arnCheck = \"arn:aws:apigateway:us-east-1::\\/restapis\\/98pa042ec9\\/stages\\/$default\";",
											"",
											"  // Tests",
											"  pm.test(\"Testing Response Body Values\", function() ",
											"  {",
											"      pm.expect(jsonData.data.subjects[0].name).to.eql(nameValueCheck);",
											"      pm.expect(jsonData.data.subjects[0].resource_type).to.eq(resourceTypeCheck1);",
											"      pm.expect(jsonData.data.subjects[0].type).to.eq(typeCheck);",
											"      pm.expect(jsonData.data.subjects[0].cloud_type).to.eq(cloudTypeCheck);",
											"      pm.expect(jsonData.data.subjects[0].cloud_id).to.eq(cloudIdCheck);",
											"      pm.expect(jsonData.data.subjects[0].ARN).to.eq(arnCheck);    ",
											"  });",
											"}"
										]
									}
								}
							]
						},
						{
							"name": "Resources - Other Tests",
							"item": [
								{
									"name": "Subjects - Type: Resources",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var user = pm.environment.get(\"user_name\");",
													"if (user === \"Basic-Disabled\")",
													"{",
													"  pm.test(user + \" cannot access Access Explorer; Status code is 401\", function () {",
													"        pm.response.to.have.status(401);",
													"    });",
													"",
													"}",
													"else {",
													"    // Get jason body",
													"var jsonData = pm.response.json();",
													"",
													"// Asserts to check on jason Body",
													"var nameValueCheck = \"$default\";",
													"var resourceTypeCheck1 = \"API Gateway Stage\";",
													"var resourceTypeCheck2 = \"IAM\\/ACM SSL Certificate\";",
													"var resourceTypeCheck3 = \"EBS Volume\";",
													"var resourceTypeCheck4 = \"SSH Key Pair\";",
													"var resourceTypeCheck5 = \"Route Table\";",
													"",
													"",
													"var typeCheck = \"RESOURCE\";",
													"var cloudTypeCheck= \"AWS\";",
													"var cloudIdCheck = \"050283019178\";",
													"var arnCheck = \"arn:aws:apigateway:us-east-1::\\/restapis\\/98pa042ec9\\/stages\\/$default\";",
													"",
													"",
													"// Tests",
													"pm.test(\"Testing Response Body Values\", function() ",
													"{",
													"    pm.expect(jsonData.data.subjects[6].name).to.eql(nameValueCheck);",
													"    ",
													"    pm.expect(jsonData.data.subjects[6].resource_type).to.eq(resourceTypeCheck1);",
													"    pm.expect(jsonData.data.subjects[0].resource_type).to.eq(resourceTypeCheck2);",
													"    pm.expect(jsonData.data.subjects[5].resource_type).to.eq(resourceTypeCheck3);",
													"    pm.expect(jsonData.data.subjects[8].resource_type).to.eq(resourceTypeCheck4);",
													"    pm.expect(jsonData.data.subjects[9].resource_type).to.eq(resourceTypeCheck5);",
													"",
													"    pm.expect(jsonData.data.subjects[6].type).to.eq(typeCheck);",
													"    pm.expect(jsonData.data.subjects[6].cloud_type).to.eq(cloudTypeCheck);",
													"    pm.expect(jsonData.data.subjects[6].cloud_id).to.eq(cloudIdCheck);",
													"    pm.expect(jsonData.data.subjects[6].ARN).to.eq(arnCheck);",
													"    ",
													"    ",
													"});",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true,
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"columns\": [],\n    \"filters\": [],\n    \"application_group_id\": 44,\n    \"access_level\": \"HAS_ACCESS\",\n    \"expected_type\": \"RESOURCE\",\n    \"page\": 1,\n    \"page_size\": 20,\n    \"sort\": {\n        \"key\": \"name\",\n        \"direction\": \"ASC\"\n    }\n}"
										},
										"url": {
											"raw": "{{domain}}/v3/iam/iam-explorer/subjects",
											"host": [
												"{{domain}}"
											],
											"path": [
												"v3",
												"iam",
												"iam-explorer",
												"subjects"
											]
										}
									},
									"response": []
								},
								{
									"name": "Subjects - Type: Resources - Search: Permissions: WRITE",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var user = pm.environment.get(\"user_name\");",
													"if (user === \"Basic-Disabled\")",
													"{",
													"  pm.test(user + \" cannot access Access Explorer; Status code is 401\", function () {",
													"        pm.response.to.have.status(401);",
													"    });",
													"",
													"}",
													"else {",
													"// Get jason body",
													"var jsonData = pm.response.json();",
													"",
													"// Asserts to check on jason Body",
													"var nameValueCheck = \"admin\";",
													"var typeCheck = \"USER\";",
													"var cloudTypeCheck= \"AWS\";",
													"var cloudIdCheck = \"050283019178\";",
													"var writeCheck = \"ALLOWED\";",
													"",
													"",
													"// Tests",
													"pm.test(\"Testing Response Body Values\", function() ",
													"{",
													"    pm.expect(jsonData.data.subjects[0].name).to.eql(nameValueCheck);",
													"    pm.expect(jsonData.data.subjects[0].type).to.eq(typeCheck);",
													"    pm.expect(jsonData.data.subjects[0].cloud_type).to.eq(cloudTypeCheck);",
													"    pm.expect(jsonData.data.subjects[0].cloud_id).to.eq(cloudIdCheck);",
													"    pm.expect(jsonData.data.subjects[0].acl.write).to.eq(writeCheck);",
													"    ",
													"});",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true,
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"columns\": [],\n    \"filters\": [\n        {\n            \"key\": \"acl\",\n            \"value\": [\n                \"WRITE\"\n            ]\n        }\n    ],\n    \"application_group_id\": 44,\n    \"access_level\": \"HAS_ACCESS\",\n    \"expected_type\": \"USER\",\n    \"page\": 1,\n    \"page_size\": 20,\n    \"sort\": {\n        \"key\": \"name\",\n        \"direction\": \"ASC\"\n    },\n    \"scope\": [\n        {\n            \"id\": \"servicecertificate:9950:ced24ac3-6c7e-42ad-b2c3-d6ca7e960a3e:\",\n            \"type\": \"RESOURCE\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{domain}}/v3/iam/iam-explorer/subjects",
											"host": [
												"{{domain}}"
											],
											"path": [
												"v3",
												"iam",
												"iam-explorer",
												"subjects"
											]
										}
									},
									"response": []
								},
								{
									"name": "Subjects - Type: Resources - Search: Permissions: READ",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var user = pm.environment.get(\"user_name\");",
													"if (user === \"Basic-Disabled\")",
													"{",
													"  pm.test(user + \" cannot access Access Explorer; Status code is 401\", function () {",
													"        pm.response.to.have.status(401);",
													"    });",
													"",
													"}",
													"else {",
													"// Get jason body",
													"var jsonData = pm.response.json();",
													"",
													"// Asserts to check on jason Body",
													"var nameValueCheck = \"admin\";",
													"var typeCheck = \"USER\";",
													"var cloudTypeCheck= \"AWS\";",
													"var cloudIdCheck = \"050283019178\";",
													"var readCheck = \"ALLOWED\";",
													"",
													"",
													"// Tests",
													"pm.test(\"Testing Response Body Values\", function() ",
													"{",
													"    pm.expect(jsonData.data.subjects[0].name).to.eql(nameValueCheck);",
													"    pm.expect(jsonData.data.subjects[0].type).to.eq(typeCheck);",
													"    pm.expect(jsonData.data.subjects[0].cloud_type).to.eq(cloudTypeCheck);",
													"    pm.expect(jsonData.data.subjects[0].cloud_id).to.eq(cloudIdCheck);",
													"    pm.expect(jsonData.data.subjects[0].acl.read).to.eq(readCheck);",
													"    ",
													"});",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true,
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"columns\": [],\n    \"filters\": [\n        {\n            \"key\": \"acl\",\n            \"value\": [\n                \"READ\"\n            ]\n        }\n    ],\n    \"application_group_id\": 44,\n    \"access_level\": \"HAS_ACCESS\",\n    \"expected_type\": \"USER\",\n    \"page\": 1,\n    \"page_size\": 20,\n    \"sort\": {\n        \"key\": \"name\",\n        \"direction\": \"ASC\"\n    },\n    \"scope\": [\n        {\n            \"id\": \"servicecertificate:9950:ced24ac3-6c7e-42ad-b2c3-d6ca7e960a3e:\",\n            \"type\": \"RESOURCE\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{domain}}/v3/iam/iam-explorer/subjects",
											"host": [
												"{{domain}}"
											],
											"path": [
												"v3",
												"iam",
												"iam-explorer",
												"subjects"
											]
										}
									},
									"response": []
								},
								{
									"name": "Subjects - Type: Resources - Search: Permissions: LIST",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var user = pm.environment.get(\"user_name\");",
													"if (user === \"Basic-Disabled\")",
													"{",
													"  pm.test(user + \" cannot access Access Explorer; Status code is 401\", function () {",
													"        pm.response.to.have.status(401);",
													"    });",
													"",
													"}",
													"else {",
													"// Get jason body",
													"var jsonData = pm.response.json();",
													"",
													"// Asserts to check on jason Body",
													"var nameValueCheck = \"admin\";",
													"var typeCheck = \"USER\";",
													"var cloudTypeCheck= \"AWS\";",
													"var cloudIdCheck = \"050283019178\";",
													"var listCheck = \"ALLOWED\";",
													"",
													"",
													"// Tests",
													"pm.test(\"Testing Response Body Values\", function() ",
													"{",
													"    pm.expect(jsonData.data.subjects[0].name).to.eql(nameValueCheck);",
													"    pm.expect(jsonData.data.subjects[0].type).to.eq(typeCheck);",
													"    pm.expect(jsonData.data.subjects[0].cloud_type).to.eq(cloudTypeCheck);",
													"    pm.expect(jsonData.data.subjects[0].cloud_id).to.eq(cloudIdCheck);",
													"    pm.expect(jsonData.data.subjects[0].acl.list).to.eq(listCheck);",
													"    ",
													"});",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true,
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"columns\": [],\n    \"filters\": [\n        {\n            \"key\": \"acl\",\n            \"value\": [\n                \"LIST\"\n            ]\n        }\n    ],\n    \"application_group_id\": 44,\n    \"access_level\": \"HAS_ACCESS\",\n    \"expected_type\": \"USER\",\n    \"page\": 1,\n    \"page_size\": 20,\n    \"sort\": {\n        \"key\": \"name\",\n        \"direction\": \"ASC\"\n    },\n    \"scope\": [\n        {\n            \"id\": \"servicecertificate:9950:ced24ac3-6c7e-42ad-b2c3-d6ca7e960a3e:\",\n            \"type\": \"RESOURCE\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{domain}}/v3/iam/iam-explorer/subjects",
											"host": [
												"{{domain}}"
											],
											"path": [
												"v3",
												"iam",
												"iam-explorer",
												"subjects"
											]
										}
									},
									"response": []
								},
								{
									"name": "Subjects - Type: Resources - Search: Permissions: permission",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var user = pm.environment.get(\"user_name\");",
													"if (user === \"Basic-Disabled\")",
													"{",
													"  pm.test(user + \" cannot access Access Explorer; Status code is 401\", function () {",
													"        pm.response.to.have.status(401);",
													"    });",
													"",
													"}",
													"else ",
													"{",
													"    // Get jason body",
													"    var jsonData = pm.response.json();",
													"",
													"    // Asserts to check on jason Body",
													"    var nameValueCheck = \"admin\";",
													"    var typeCheck = \"USER\";",
													"    var cloudTypeCheck= \"AWS\";",
													"    var cloudIdCheck = \"050283019178\";",
													"    var permissionCheck = \"ALLOWED\";",
													"",
													"    // Tests",
													"    pm.test(\"Testing Response Body Values\", function()  ",
													"    {",
													"        pm.expect(jsonData.data.subjects[0].name).to.eql(nameValueCheck);",
													"        pm.expect(jsonData.data.subjects[0].type).to.eq(typeCheck);",
													"        pm.expect(jsonData.data.subjects[0].cloud_type).to.eq(cloudTypeCheck);",
													"        pm.expect(jsonData.data.subjects[0].cloud_id).to.eq(cloudIdCheck);",
													"        pm.expect(jsonData.data.subjects[0].acl.permission).to.eq(permissionCheck);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true,
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"columns\": [],\n    \"filters\": [\n        {\n            \"key\": \"acl\",\n            \"value\": [\n                \"permission\"\n            ]\n        }\n    ],\n    \"application_group_id\": 44,\n    \"access_level\": \"HAS_ACCESS\",\n    \"expected_type\": \"USER\",\n    \"page\": 1,\n    \"page_size\": 20,\n    \"sort\": {\n        \"key\": \"name\",\n        \"direction\": \"ASC\"\n    },\n    \"scope\": [\n        {\n            \"id\": \"servicecertificate:9950:ced24ac3-6c7e-42ad-b2c3-d6ca7e960a3e:\",\n            \"type\": \"RESOURCE\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{domain}}/v3/iam/iam-explorer/subjects",
											"host": [
												"{{domain}}"
											],
											"path": [
												"v3",
												"iam",
												"iam-explorer",
												"subjects"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Applications",
							"item": [
								{
									"name": "Subjects - Type: Application",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var user = pm.environment.get(\"user_name\");",
													"if (user === \"Basic-Disabled\")",
													"{",
													"  pm.test(user + \" cannot access Access Explorer; Status code is 401\", function () {",
													"        pm.response.to.have.status(401);",
													"    });",
													"",
													"}",
													"else {",
													"    // Get jason body",
													"var jsonData = pm.response.json();",
													"",
													"// Asserts to check on jason Body",
													"//var nameValueCheck = \"#botactiontestchannel\";",
													"var nameValueCheck = \"Niluka_Bamunuarachchige@rapid7.com\"",
													"var resourceTypeCheck = null;",
													"var typeCheck = \"APPLICATION\";",
													"var cloudTypeCheck = null;",
													"var cloudIdCheck = null;",
													"var arnCheck = null;",
													"//var resourceCountsCheck = \"2\"",
													"",
													"// Tests",
													"pm.test(\"Testing Response Body Values\", function() ",
													"{",
													"    pm.expect(jsonData.data.subjects[0].name).to.eql(nameValueCheck);",
													"    pm.expect(jsonData.data.subjects[0].resource_type).to.eq(resourceTypeCheck);",
													"    pm.expect(jsonData.data.subjects[0].type).to.eq(typeCheck);",
													"    pm.expect(jsonData.data.subjects[0].cloud_type).to.eq(cloudTypeCheck);",
													"    pm.expect(jsonData.data.subjects[0].cloud_id).to.eq(cloudIdCheck);",
													"    pm.expect(jsonData.data.subjects[0].ARN).to.eq(arnCheck);",
													"    //pm.expect(jsonData.data.subjects[0].resource_counts).to.eq(resourceCountsCheck);",
													"    ",
													"});",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true,
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"columns\": [],\n    \"filters\": [],\n    \"application_group_id\": 2,\n    \"access_level\": \"HAS_ACCESS\",\n    \"expected_type\": \"APPLICATION\",\n    \"page\": 1,\n    \"page_size\": 50,\n    \"sort\": {\n        \"key\": \"name\",\n        \"direction\": \"ASC\"\n    }\n}"
										},
										"url": {
											"raw": "{{domain}}/v3/iam/iam-explorer/subjects",
											"host": [
												"{{domain}}"
											],
											"path": [
												"v3",
												"iam",
												"iam-explorer",
												"subjects"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"auth": {
						"type": "basic",
						"basic": [
							{
								"key": "password",
								"value": "\"{{divvy_password}}\"",
								"type": "string"
							},
							{
								"key": "username",
								"value": "\"{{divvy_username}}\"",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Global Test: Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "IAM Data",
					"item": [
						{
							"name": "Download Debug Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var user = pm.environment.get(\"user_name\");",
											"if (user === \"Basic-Disabled\")",
											"{",
											"  pm.test(user + \" cannot access Access Explorer; Status code is 401\", function () {",
											"        pm.response.to.have.status(401);",
											"    });",
											"",
											"}",
											"else {",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"complete\");",
											"});",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/v3/iam/iam-explorer/download-debug",
									"host": [
										"{{domain}}"
									],
									"path": [
										"v3",
										"iam",
										"iam-explorer",
										"download-debug"
									]
								}
							},
							"response": []
						},
						{
							"name": "View Cache Build Logs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body contains 'complete'\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"complete\");",
											"});",
											"",
											"pm.test(\"Body contains 5 accounts\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"5\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"records_count\": 30,\n    \"output\": \"json\"\n}"
								},
								"url": {
									"raw": "{{domain}}/v3/iam/iam-explorer/cache-build-logs",
									"host": [
										"{{domain}}"
									],
									"path": [
										"v3",
										"iam",
										"iam-explorer",
										"cache-build-logs"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Settings",
					"item": [
						{
							"name": "Account Whitelist",
							"item": [
								{
									"name": "Account Whitelist - Add",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"setting_name\": \"whitelisted_organization_service_ids\",\n    \"setting_value\": [\n        9950\n    ]\n}"
										},
										"url": {
											"raw": "{{domain}}/v3/iam/settings/set",
											"host": [
												"{{domain}}"
											],
											"path": [
												"v3",
												"iam",
												"settings",
												"set"
											]
										}
									},
									"response": []
								},
								{
									"name": "Account Whitelist - Remove",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"setting_name\": \"whitelisted_organization_service_ids\",\n    \"setting_value\": [\n        9950\n    ]\n}"
										},
										"url": {
											"raw": "{{domain}}/v3/iam/settings/set",
											"host": [
												"{{domain}}"
											],
											"path": [
												"v3",
												"iam",
												"settings",
												"set"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"//Checking only admins are able to perform the action",
											"var user = pm.environment.get(\"user_name\");",
											"if (user != \"APITestingAdmin\")",
											"{",
											"  pm.test(user + \" You do not have sufficient permissions to execute this operation\", function () {",
											"        pm.response.to.have.status(401);",
											"    });",
											"",
											"}",
											"else ",
											"{",
											"    // Get jason body",
											"    var jsonData = pm.response.json();",
											"",
											"    // Asserts to check on jason Body",
											"    var cloudID = 9950;",
											"",
											"",
											"    // Tests",
											"    pm.test(\"IAM Principals Global Test: Testing Response Body Values\", function() ",
											"    {",
											"          pm.expect(jsonData.setting_value[0]).to.eql(cloudID);",
											"    ",
											"    ",
											"    });",
											"}",
											"",
											""
										]
									}
								}
							]
						},
						{
							"name": "Application Group Rules",
							"item": [
								{
									"name": "Test Application Group Rules",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Get jason body",
													"var jsonData = pm.response.json();",
													"",
													"// Asserts to check on jason Body",
													"var applicationCheck1 = 29;",
													"var applicationCheck2 = 1;",
													"",
													"",
													"// Tests",
													"pm.test(\"Testing Response Body Values\", function() ",
													"{",
													"    pm.expect(jsonData.applications.Automation).to.eql(applicationCheck1);",
													"    pm.expect(jsonData.applications.Niluka2).to.eq(applicationCheck2);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"group_id\": 44\n}"
										},
										"url": {
											"raw": "{{domain}}/v3/iam/iam-explorer/test-application-group-rules",
											"host": [
												"{{domain}}"
											],
											"path": [
												"v3",
												"iam",
												"iam-explorer",
												"test-application-group-rules"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test Application Group Rules during creation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Get jason body",
													"var jsonData = pm.response.json();",
													"",
													"// Asserts to check on jason Body",
													"var applicationCheck1 = 8;",
													"var applicationCheck2 = 1;",
													"",
													"",
													"// Tests",
													"pm.test(\"Testing Response Body Values\", function() ",
													"{",
													"    pm.expect(jsonData.applications.Cherry).to.eql(applicationCheck1);",
													"    pm.expect(jsonData.applications.BlueOcean).to.eq(applicationCheck2);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"matching_rules\": [\n        {\n            \"type\": \"tag\",\n            \"pattern\": \"Application\"\n        },\n        {\n            \"type\": \"name\",\n            \"pattern\": \"AWS-(?P<application>.*)-(\\\\d{12})\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{domain}}/v3/iam/iam-explorer/test-application-group-rules",
											"host": [
												"{{domain}}"
											],
											"path": [
												"v3",
												"iam",
												"iam-explorer",
												"test-application-group-rules"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add Application Group Rules",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Get jason body",
													"var jsonData = pm.response.json();",
													"",
													"// set id as an environment variable so that this rule can be deleted next",
													"pm.environment.set(\"applicationGroupID\", jsonData.application_group.id);",
													"",
													"// Asserts to check on jason Body",
													"var nameCheck = \"API Testing\";",
													"var typeCheck1 = \"tag\";",
													"var patternCheck1 = \"Application\";",
													"var typeCheck2 = \"name\";",
													"var patternCheck2 = \"AWS-(?P<application>.*)-(\\\\d{12})\";",
													"",
													"// Tests",
													"pm.test(\"Testing Response Body Values\", function() ",
													"{",
													"    pm.expect(jsonData.application_group.name).to.eql(nameCheck);",
													"    pm.expect(jsonData.application_group.matching_rules[0].type).to.eq(typeCheck1);",
													"    pm.expect(jsonData.application_group.matching_rules[0].pattern).to.eq(patternCheck1);  ",
													"    pm.expect(jsonData.application_group.matching_rules[1].type).to.eq(typeCheck2);",
													"    pm.expect(jsonData.application_group.matching_rules[1].pattern).to.eq(patternCheck2); ",
													"    //pm.expect(jsonData.application_group.id).to.eq(\"59\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"application_group\": {\n        \"name\": \"API Testing\",\n        \"matching_rules\": [\n            {\n                \"type\": \"tag\",\n                \"pattern\": \"Application\"\n            },\n            {\n                \"type\": \"name\",\n                \"pattern\": \"AWS-(?P<application>.*)-(\\\\d{12})\"\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{domain}}/v3/iam/config/application-groups",
											"host": [
												"{{domain}}"
											],
											"path": [
												"v3",
												"iam",
												"config",
												"application-groups"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Application Group Rules",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{domain}}/v3/iam/config/application-groups/{{applicationGroupID}}",
											"host": [
												"{{domain}}"
											],
											"path": [
												"v3",
												"iam",
												"config",
												"application-groups",
												"{{applicationGroupID}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "\"{{divvy_password}}\"",
				"type": "string"
			},
			{
				"key": "username",
				"value": "\"{{divvy_username}}\"",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "resource_type",
			"value": ""
		},
		{
			"key": "resource_types",
			"value": ""
		}
	]
}